/*
  ==============================================================================

    Tuning_tests.h
    Created: 2 Dec 2021 6:54:30pm
    Author:  vincenzo

  ==============================================================================
*/

#pragma once
#include "TestsCommon.h"
#include "../tuning/FunctionalTuning.h"

class FunctionalTuning_Test : public EverytoneTunerUnitTest
{

private:

    void test_tuningMap(int expectedSize, const double* expected, const Map<double>* map, int start = 0)
    {
        int index;
        for (int i = 0; i < expectedSize; i++)
        {
            index = start + i;
            expect(expected[i] == map->at(index),
                   testErrorMessage("centsMap at " + juce::String(index), expected[i], map->at(index)));
        }
    }

    void test_closest_index(const TuningTable* tuning, juce::String name, int inputSize, const double* inputMtsList, const int* expectedIndices, const double* expectedMts=nullptr)
    { 
        for (int i = 0; i < inputSize; i++)
        {
            int e = expectedIndices[i];

            double input = inputMtsList[i];
            int a = tuning->closestIndexToMts(input);

            expect(e == a, testErrorMessage(name + " at " + juce::String(i), e, a));

            if (expectedMts != nullptr)
            {
                double emts = roundN(8, expectedMts[i]);
                double amts = roundN(8, tuning->mtsAt(a));
                double dif = abs(amts - emts);
                expect(dif <= TABLE_EPSILON, testErrorMessage(name + " MTS at " + juce::String(i), emts, amts));
            }
        }
    }

public:

    struct GetAndSetParams
    {
        int expectedTuningSize = 0;
        FunctionalTuning* tuning;
        CentsDefinition expectedDefinition;
        
        const double* expectedIntervalCentsTable = nullptr;
        const double* expectedRatioTable = nullptr;
        
        int expectedRootIndex = 0;
        int expectedTableSize = 0;
        
        const double* expectedFrequencyTable = nullptr;
        const double* expectedMtsTable = nullptr;

        double setNewRootFrequency;
        int newExpectedRootIndex = 0;
        int newExpectedTableSize = 0;
        const double* newExpectedFrequencyTable = nullptr;
        const double* newExpectedMtsTable = nullptr;

        const int* expectedClosestIndexStandardOutput = nullptr;
        const double* expectedClosestIndexStandardMtsOutput = nullptr;
        
        const int indexTestTableSize;
        const double* closestIndexInput = nullptr;
        const int* expectedClosestIndexOutput = nullptr;
        const double* expectedClosestIndexMtsOutput = nullptr;
    };

    FunctionalTuning_Test() : EverytoneTunerUnitTest("Tuning") {};

    void runTest() override
    {
        defaultTuningTest();
        test31edo();
        test34edoR1();
    }

private:

    void doTests(juce::String testName, GetAndSetParams params, bool deleteTables=true)
    {
        beginTest(testName + " Getters");
        auto tuning = params.tuning;

        auto definition = tuning->getDefinition();
        expect_exact(params.expectedDefinition.name, definition.name, "definition.name");
        expect_exact(params.expectedDefinition.description, definition.description, "definition.description");

        auto rootFrequency = tuning->getRootFrequency();
        expect_equals(params.expectedDefinition.rootFrequency, rootFrequency, "reference.rootFrequency");

        expect_exact(params.expectedRootIndex, tuning->getRootIndex(), "getRootIndex()");
        expect_exact(params.expectedTableSize, tuning->getTableSize(), "getTuningSize()");

        expect_exact(params.expectedDefinition.name, tuning->getName(), "getName()");
        expect_exact(params.expectedDefinition.description, tuning->getDescription(), "getDescription()");
        expect_exact(params.expectedDefinition.virtualPeriod, tuning->getVirtualPeriod(), "getVirtualPeriod()");
        expect_exact(params.expectedDefinition.virtualSize, tuning->getVirtualSize(), "getVirtualSize()");


        beginTest(testName + " Tuning Tables");

        double expectedPeriod = params.expectedIntervalCentsTable[params.expectedTuningSize - 1];
        expect_equals(expectedPeriod, tuning->getPeriodCents(), "getPeriodCents()");
        
        test_table(params.expectedTuningSize, params.expectedIntervalCentsTable, tuning->getIntervalCentsList(), "getIntervalCentsList()");
        test_table(params.expectedTuningSize, params.expectedRatioTable, tuning->getIntervalRatioList(), "getIntervalRatioList");

        test_table(params.expectedTableSize, params.expectedFrequencyTable, tuning->getFrequencyTable(), "getFrequencyTable");
        test_table(params.expectedTableSize, params.expectedMtsTable, tuning->getMtsTable(), "getMtsTable()");

        auto copied = FunctionalTuning(*tuning);
        expect(copied == *tuning, "Copied tuning failed with == operator");

        beginTest(testName + " Setters");

        tuning->setRootFrequency(params.setNewRootFrequency);
        expect_equals(params.setNewRootFrequency, tuning->getRootFrequency(), "test setRootFrequency()");
        expect_exact(params.newExpectedRootIndex, tuning->getRootIndex(), "new getRootIndex()");
        
        test_table(params.newExpectedTableSize, params.newExpectedFrequencyTable, tuning->getFrequencyTable(), "new getFrequencyTable");
        test_table(params.newExpectedTableSize, params.newExpectedMtsTable, tuning->getMtsTable(), "new getMtsTable()");

        
        // Reset changes
        tuning->setRootFrequency(params.expectedDefinition.rootFrequency); // reset reference

        beginTest(testName + " Helpers");

        const int stdSize = 128;
        const double mtsStandardInput[stdSize] = { 0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0, 19.0, 20.0, 21.0, 22.0, 23.0, 24.0, 25.0, 26.0, 27.0, 28.0, 29.0, 30.0, 31.0, 32.0, 33.0, 34.0, 35.0, 36.0, 37.0, 38.0, 39.0, 40.0, 41.0, 42.0, 43.0, 44.0, 45.0, 46.0, 47.0, 48.0, 49.0, 50.0, 51.0, 52.0, 53.0, 54.0, 55.0, 56.0, 57.0, 58.0, 59.0, 60.0, 61.0, 62.0, 63.0, 64.0, 65.0, 66.0, 67.0, 68.0, 69.0, 70.0, 71.0, 72.0, 73.0, 74.0, 75.0, 76.0, 77.0, 78.0, 79.0, 80.0, 81.0, 82.0, 83.0, 84.0, 85.0, 86.0, 87.0, 88.0, 89.0, 90.0, 91.0, 92.0, 93.0, 94.0, 95.0, 96.0, 97.0, 98.0, 99.0, 100.0, 101.0, 102.0, 103.0, 104.0, 105.0, 106.0, 107.0, 108.0, 109.0, 110.0, 111.0, 112.0, 113.0, 114.0, 115.0, 116.0, 117.0, 118.0, 119.0, 120.0, 121.0, 122.0, 123.0, 124.0, 125.0, 126.0, 127.0 };
        test_closest_index(tuning, "Closest Index Standard Input", stdSize, 
                           mtsStandardInput, 
                           params.expectedClosestIndexStandardOutput, 
                           params.expectedClosestIndexStandardMtsOutput);

        test_closest_index(tuning, "Closest Index Test", params.indexTestTableSize,
                           params.closestIndexInput,
                           params.expectedClosestIndexOutput,
                           params.expectedClosestIndexMtsOutput);

        if (deleteTables)
        {
            delete[] params.expectedFrequencyTable;
            delete[] params.expectedMtsTable;
            delete[] params.newExpectedFrequencyTable;
            delete[] params.newExpectedMtsTable;
            delete[] params.closestIndexInput;
            delete[] params.expectedClosestIndexOutput;
            delete[] params.expectedClosestIndexMtsOutput;
        }
    }

    void defaultTuningTest()
    {
        CentsDefinition defaultDefinition;
        defaultDefinition.virtualPeriod = 1200.0;
        defaultDefinition.virtualSize = 12;
        auto defaultTuning = std::make_unique<FunctionalTuning>(defaultDefinition);

        const int size = 12;
        const double expectedIntervalCentsTable[size] = { 100.0, 200.0, 300.0, 400.0, 500.0, 600.0, 700.0, 800.0, 900.0, 1000.0, 1100.0, 1200.0 };
        const double expectedRatioTable[size] = { 1.0594630943592953, 1.122462048309373, 1.189207115002721, 1.2599210498948732, 1.3348398541700344, 1.4142135623730951, 1.4983070768766815, 1.5874010519681994, 1.681792830507429, 1.7817974362806785, 1.8877486253633868, 2.0 };

        const int rootIndex = 69;
        const int tableSize = 128;
        const double* expectedFrequencyTable = new double[tableSize] { 8.1757989156, 8.661957218, 9.1770239974, 9.7227182413, 10.3008611535, 10.9133822323, 11.5623257097, 12.2498573744, 12.9782717994, 13.75, 14.5676175474, 15.4338531643, 16.3515978313, 17.3239144361, 18.3540479948, 19.4454364826, 20.6017223071, 21.8267644646, 23.1246514195, 24.4997147489, 25.9565435987, 27.5, 29.1352350949, 30.8677063285, 32.7031956626, 34.6478288721, 36.7080959897, 38.8908729653, 41.2034446141, 43.6535289291, 46.249302839, 48.9994294977, 51.9130871975, 55.0, 58.2704701898, 61.735412657, 65.4063913251, 69.2956577442, 73.4161919794, 77.7817459305, 82.4068892282, 87.3070578583, 92.4986056779, 97.9988589954, 103.826174395, 110.0, 116.5409403795, 123.470825314, 130.8127826503, 138.5913154884, 146.8323839587, 155.563491861, 164.8137784564, 174.6141157165, 184.9972113558, 195.9977179909, 207.65234879, 220.0, 233.081880759, 246.9416506281, 261.6255653006, 277.1826309769, 293.6647679174, 311.1269837221, 329.6275569129, 349.228231433, 369.9944227116, 391.9954359817, 415.3046975799, 440.0, 466.1637615181, 493.8833012561, 523.2511306012, 554.3652619537, 587.3295358348, 622.2539674442, 659.2551138257, 698.456462866, 739.9888454233, 783.9908719635, 830.6093951599, 880.0, 932.3275230362, 987.7666025122, 1046.5022612024, 1108.7305239075, 1174.6590716696, 1244.5079348883, 1318.5102276515, 1396.912925732, 1479.9776908465, 1567.981743927, 1661.2187903198, 1760.0, 1864.6550460724, 1975.5332050245, 2093.0045224048, 2217.461047815, 2349.3181433393, 2489.0158697766, 2637.020455303, 2793.825851464, 2959.9553816931, 3135.963487854, 3322.4375806396, 3520.0, 3729.3100921447, 3951.066410049, 4186.0090448096, 4434.92209563, 4698.6362866785, 4978.0317395533, 5274.0409106059, 5587.6517029281, 5919.9107633862, 6271.926975708, 6644.8751612791, 7040.0, 7458.6201842894, 7902.132820098, 8372.0180896192, 8869.8441912599, 9397.272573357, 9956.0634791066, 10548.0818212118, 11175.3034058561, 11839.8215267723, 12543.853951416 };
        const double* expectedMtsTable = new double[tableSize] { 0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0, 19.0, 20.0, 21.0, 22.0, 23.0, 24.0, 25.0, 26.0, 27.0, 28.0, 29.0, 30.0, 31.0, 32.0, 33.0, 34.0, 35.0, 36.0, 37.0, 38.0, 39.0, 40.0, 41.0, 42.0, 43.0, 44.0, 45.0, 46.0, 47.0, 48.0, 49.0, 50.0, 51.0, 52.0, 53.0, 54.0, 55.0, 56.0, 57.0, 58.0, 59.0, 60.0, 61.0, 62.0, 63.0, 64.0, 65.0, 66.0, 67.0, 68.0, 69.0, 70.0, 71.0, 72.0, 73.0, 74.0, 75.0, 76.0, 77.0, 78.0, 79.0, 80.0, 81.0, 82.0, 83.0, 84.0, 85.0, 86.0, 87.0, 88.0, 89.0, 90.0, 91.0, 92.0, 93.0, 94.0, 95.0, 96.0, 97.0, 98.0, 99.0, 100.0, 101.0, 102.0, 103.0, 104.0, 105.0, 106.0, 107.0, 108.0, 109.0, 110.0, 111.0, 112.0, 113.0, 114.0, 115.0, 116.0, 117.0, 118.0, 119.0, 120.0, 121.0, 122.0, 123.0, 124.0, 125.0, 126.0, 127.0 };

        const double newRootFrequency = 256.0;
        const int newRootIndex = 60;
        const int newTableSize = 128;
        const double* newExpectedFrequencyTable = new double[tableSize] { 8, 8.47570475, 8.97969639, 9.51365692, 10.0793684, 10.67871883, 11.3137085, 11.98645662, 12.69920842, 13.45434264, 14.25437949, 15.101989, 16, 16.95140951, 17.95939277, 19.02731384, 20.1587368, 21.35743767, 22.627417, 23.97291323, 25.39841683, 26.90868529, 28.50875898, 30.20397801, 32, 33.90281902, 35.91878555, 38.05462768, 40.3174736, 42.71487533, 45.254834, 47.94582646, 50.79683366, 53.81737058, 57.01751796, 60.40795601, 64, 67.80563804, 71.83757109, 76.10925536, 80.63494719, 85.42975067, 90.50966799, 95.89165292, 101.59366733, 107.63474115, 114.03503592, 120.81591202, 128, 135.61127608, 143.67514218, 152.21851072, 161.26989439, 170.85950133, 181.01933598, 191.78330584, 203.18733465, 215.2694823, 228.07007184, 241.63182405, 256, 271.22255216, 287.35028437, 304.43702144, 322.53978877, 341.71900267, 362.03867197, 383.56661168, 406.3746693, 430.53896461, 456.14014369, 483.26364809, 512, 542.44510431, 574.70056873, 608.87404288, 645.07957755, 683.43800534, 724.07734394, 767.13322336, 812.74933861, 861.07792922, 912.28028738, 966.52729619, 1024, 1084.89020862, 1149.40113747, 1217.74808576, 1290.15915509, 1366.87601067, 1448.15468787, 1534.26644672, 1625.49867722, 1722.15585844, 1824.56057475, 1933.05459237, 2048, 2169.78041725, 2298.80227494, 2435.49617153, 2580.31831018, 2733.75202134, 2896.30937574, 3068.53289344, 3250.99735443, 3444.31171688, 3649.1211495, 3866.10918474, 4096, 4339.5608345, 4597.60454988, 4870.99234305, 5160.63662037, 5467.50404268, 5792.61875148, 6137.06578689, 6501.99470886, 6888.62343376, 7298.24229901, 7732.21836949, 8192, 8679.12166899, 9195.20909975, 9741.9846861, 10321.27324074, 10935.00808536, 11585.23750296, 12274.13157377 };
        const double* newExpectedMtsTable = new double[tableSize] { -0.37631656, 0.62368344, 1.62368344, 2.62368344, 3.62368344, 4.62368344, 5.62368344, 6.62368344, 7.62368344, 8.62368344, 9.62368344, 10.62368344, 11.62368344, 12.62368344, 13.62368344, 14.62368344, 15.62368344, 16.62368344, 17.62368344, 18.62368344, 19.62368344, 20.62368344, 21.62368344, 22.62368344, 23.62368344, 24.62368344, 25.62368344, 26.62368344, 27.62368344, 28.62368344, 29.62368344, 30.62368344, 31.62368344, 32.62368344, 33.62368344, 34.62368344, 35.62368344, 36.62368344, 37.62368344, 38.62368344, 39.62368344, 40.62368344, 41.62368344, 42.62368344, 43.62368344, 44.62368344, 45.62368344, 46.62368344, 47.62368344, 48.62368344, 49.62368344, 50.62368344, 51.62368344, 52.62368344, 53.62368344, 54.62368344, 55.62368344, 56.62368344, 57.62368344, 58.62368344, 59.62368344, 60.62368344, 61.62368344, 62.62368344, 63.62368344, 64.62368344, 65.62368344, 66.62368344, 67.62368344, 68.62368344, 69.62368344, 70.62368344, 71.62368344, 72.62368344, 73.62368344, 74.62368344, 75.62368344, 76.62368344, 77.62368344, 78.62368344, 79.62368344, 80.62368344, 81.62368344, 82.62368344, 83.62368344, 84.62368344, 85.62368344, 86.62368344, 87.62368344, 88.62368344, 89.62368344, 90.62368344, 91.62368344, 92.62368344, 93.62368344, 94.62368344, 95.62368344, 96.62368344, 97.62368344, 98.62368344, 99.62368344, 100.62368344, 101.62368344, 102.62368344, 103.62368344, 104.62368344, 105.62368344, 106.62368344, 107.62368344, 108.62368344, 109.62368344, 110.62368344, 111.62368344, 112.62368344, 113.62368344, 114.62368344, 115.62368344, 116.62368344, 117.62368344, 118.62368344, 119.62368344, 120.62368344, 121.62368344, 122.62368344, 123.62368344, 124.62368344, 125.62368344, 126.62368344 };

        const int expectedStandardOutput[128] = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127 };
        const double expectedMtsStandardOutput[128] = { 0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0, 19.0, 20.0, 21.0, 22.0, 23.0, 24.0, 25.0, 26.0, 27.0, 28.0, 29.0, 30.0, 31.0, 32.0, 33.0, 34.0, 35.0, 36.0, 37.0, 38.0, 39.0, 40.0, 41.0, 42.0, 43.0, 44.0, 45.0, 46.0, 47.0, 48.0, 49.0, 50.0, 51.0, 52.0, 53.0, 54.0, 55.0, 56.0, 57.0, 58.0, 59.0, 60.0, 61.0, 62.0, 63.0, 64.0, 65.0, 66.0, 67.0, 68.0, 69.0, 70.0, 71.0, 72.0, 73.0, 74.0, 75.0, 76.0, 77.0, 78.0, 79.0, 80.0, 81.0, 82.0, 83.0, 84.0, 85.0, 86.0, 87.0, 88.0, 89.0, 90.0, 91.0, 92.0, 93.0, 94.0, 95.0, 96.0, 97.0, 98.0, 99.0, 100.0, 101.0, 102.0, 103.0, 104.0, 105.0, 106.0, 107.0, 108.0, 109.0, 110.0, 111.0, 112.0, 113.0, 114.0, 115.0, 116.0, 117.0, 118.0, 119.0, 120.0, 121.0, 122.0, 123.0, 124.0, 125.0, 126.0, 127.0 };
        
        // 31-edo with root of 261.6255653 up to index 128
        const int indexTableSize = 128;
        const double* closestIndexInput = new double[tableSize] { 36.7741935484, 37.1612903226, 37.5483870968, 37.935483871, 38.3225806452, 38.7096774194, 39.0967741935, 39.4838709677, 39.8709677419, 40.2580645161, 40.6451612903, 41.0322580645, 41.4193548387, 41.8064516129, 42.1935483871, 42.5806451613, 42.9677419355, 43.3548387097, 43.7419354839, 44.1290322581, 44.5161290323, 44.9032258065, 45.2903225806, 45.6774193548, 46.064516129, 46.4516129032, 46.8387096774, 47.2258064516, 47.6129032258, 48.0, 48.3870967742, 48.7741935484, 49.1612903226, 49.5483870968, 49.935483871, 50.3225806452, 50.7096774194, 51.0967741935, 51.4838709677, 51.8709677419, 52.2580645161, 52.6451612903, 53.0322580645, 53.4193548387, 53.8064516129, 54.1935483871, 54.5806451613, 54.9677419355, 55.3548387097, 55.7419354839, 56.1290322581, 56.5161290323, 56.9032258065, 57.2903225806, 57.6774193548, 58.064516129, 58.4516129032, 58.8387096774, 59.2258064516, 59.6129032258, 60.0, 60.3870967742, 60.7741935484, 61.1612903226, 61.5483870968, 61.935483871, 62.3225806452, 62.7096774194, 63.0967741935, 63.4838709677, 63.8709677419, 64.2580645161, 64.6451612903, 65.0322580645, 65.4193548387, 65.8064516129, 66.1935483871, 66.5806451613, 66.9677419355, 67.3548387097, 67.7419354839, 68.1290322581, 68.5161290323, 68.9032258065, 69.2903225806, 69.6774193548, 70.064516129, 70.4516129032, 70.8387096774, 71.2258064516, 71.6129032258, 72.0, 72.3870967742, 72.7741935484, 73.1612903226, 73.5483870968, 73.935483871, 74.3225806452, 74.7096774194, 75.0967741935, 75.4838709677, 75.8709677419, 76.2580645161, 76.6451612903, 77.0322580645, 77.4193548387, 77.8064516129, 78.1935483871, 78.5806451613, 78.9677419355, 79.3548387097, 79.7419354839, 80.1290322581, 80.5161290323, 80.9032258065, 81.2903225806, 81.6774193548, 82.064516129, 82.4516129032, 82.8387096774, 83.2258064516, 83.6129032258, 84.0, 84.3870967742, 84.7741935484, 85.1612903226, 85.5483870968, 85.935483871 };
        const int* expectedIndexOutput = new int[tableSize] { 37, 37, 38, 38, 38, 39, 39, 39, 40, 40, 41, 41, 41, 42, 42, 43, 43, 43, 44, 44, 45, 45, 45, 46, 46, 46, 47, 47, 48, 48, 48, 49, 49, 50, 50, 50, 51, 51, 51, 52, 52, 53, 53, 53, 54, 54, 55, 55, 55, 56, 56, 57, 57, 57, 58, 58, 58, 59, 59, 60, 60, 60, 61, 61, 62, 62, 62, 63, 63, 63, 64, 64, 65, 65, 65, 66, 66, 67, 67, 67, 68, 68, 69, 69, 69, 70, 70, 70, 71, 71, 72, 72, 72, 73, 73, 74, 74, 74, 75, 75, 75, 76, 76, 77, 77, 77, 78, 78, 79, 79, 79, 80, 80, 81, 81, 81, 82, 82, 82, 83, 83, 84, 84, 84, 85, 85, 86, 86 };
        const double* expectedIndexMtsOutput = new double[tableSize] { 37.0, 37.0, 38.0, 38.0, 38.0, 39.0, 39.0, 39.0, 40.0, 40.0, 41.0, 41.0, 41.0, 42.0, 42.0, 43.0, 43.0, 43.0, 44.0, 44.0, 45.0, 45.0, 45.0, 46.0, 46.0, 46.0, 47.0, 47.0, 48.0, 48.0, 48.0, 49.0, 49.0, 50.0, 50.0, 50.0, 51.0, 51.0, 51.0, 52.0, 52.0, 53.0, 53.0, 53.0, 54.0, 54.0, 55.0, 55.0, 55.0, 56.0, 56.0, 57.0, 57.0, 57.0, 58.0, 58.0, 58.0, 59.0, 59.0, 60.0, 60.0, 60.0, 61.0, 61.0, 62.0, 62.0, 62.0, 63.0, 63.0, 63.0, 64.0, 64.0, 65.0, 65.0, 65.0, 66.0, 66.0, 67.0, 67.0, 67.0, 68.0, 68.0, 69.0, 69.0, 69.0, 70.0, 70.0, 70.0, 71.0, 71.0, 72.0, 72.0, 72.0, 73.0, 73.0, 74.0, 74.0, 74.0, 75.0, 75.0, 75.0, 76.0, 76.0, 77.0, 77.0, 77.0, 78.0, 78.0, 79.0, 79.0, 79.0, 80.0, 80.0, 81.0, 81.0, 81.0, 82.0, 82.0, 82.0, 83.0, 83.0, 84.0, 84.0, 84.0, 85.0, 85.0, 86.0, 86.0 };

        GetAndSetParams params =
        {
            size,
            defaultTuning.get(),
            defaultDefinition,

            expectedIntervalCentsTable,
            expectedRatioTable,

            rootIndex,
            tableSize,
            expectedFrequencyTable,
            expectedMtsTable,

            newRootFrequency,
            newRootIndex,
            newTableSize,
            newExpectedFrequencyTable,
            newExpectedMtsTable,

            expectedStandardOutput,
            expectedMtsStandardOutput,

            indexTableSize,
            closestIndexInput,
            expectedIndexOutput,
            expectedIndexMtsOutput
        };

        doTests("Default - Functional", params, false);

        defaultTuning->cacheTables();
        doTests("Default - With Tables", params, false);

        // Standard Tuning constructor
        auto standardTuning = FunctionalTuning::StandardTuning();
        CentsDefinition stdDefinition 
        { 
            {  100, 200, 300, 400, 500, 600, 700, 800, 900, 1000, 1100, 1200 },
            440.0, juce::String("12-edo"), juce::String("The octave divided into 12 equal steps."), 1200.0, 12 
        };

        GetAndSetParams stdParams = GetAndSetParams(params);
        stdParams.tuning = standardTuning.get();
        stdParams.expectedDefinition = stdDefinition;

        doTests("Standard Tuning", stdParams, false);

        // Standard Tuning + Copy Constructor
        auto copiedTuning = FunctionalTuning(*standardTuning);
        auto copiedParams = GetAndSetParams(stdParams);
        copiedParams.tuning = &copiedTuning;
        doTests("Copied Tuning", copiedParams, false);

        // CentsDefinition::CentsDivision method
        auto divisionDef = CentsDefinition::CentsDivisions(12.0);
        auto divisionsTuning = std::make_unique<FunctionalTuning>(divisionDef);
        auto divisionsParams = GetAndSetParams(stdParams);
        divisionsParams.tuning = divisionsTuning.get();
        divisionsParams.expectedTuningSize = 1;
        divisionsParams.expectedDefinition = divisionDef;
        doTests("CentsDivision(12.0)", divisionsParams, false);

        divisionsTuning->cacheTables();
        doTests("CentsDivision(12.0) - with tables", divisionsParams);
    }

    void test31edo()
    {
        const int size = 31;
        const double expectedIntervalCentsTable[size] = { 38.70967741935484, 77.41935483870968, 116.12903225806451, 154.83870967741936, 193.5483870967742, 232.25806451612902, 270.9677419354839, 309.6774193548387, 348.38709677419354, 387.0967741935484, 425.80645161290323, 464.51612903225805, 503.2258064516129, 541.9354838709678, 580.6451612903226, 619.3548387096774, 658.0645161290323, 696.7741935483871, 735.483870967742, 774.1935483870968, 812.9032258064516, 851.6129032258065, 890.3225806451613, 929.0322580645161, 967.741935483871, 1006.4516129032259, 1045.1612903225807, 1083.8709677419356, 1122.5806451612902, 1161.2903225806451, 1200.0 };

        CentsDefinition definition =
        {
            { 38.70967741935484, 77.41935483870968, 116.12903225806451, 154.83870967741936, 193.5483870967742, 232.25806451612902, 270.9677419354839, 309.6774193548387, 348.38709677419354, 387.0967741935484, 425.80645161290323, 464.51612903225805, 503.2258064516129, 541.9354838709678, 580.6451612903226, 619.3548387096774, 658.0645161290323, 696.7741935483871, 735.483870967742, 774.1935483870968, 812.9032258064516, 851.6129032258065, 890.3225806451613, 929.0322580645161, 967.741935483871, 1006.4516129032259, 1045.1612903225807, 1083.8709677419356, 1122.5806451612902, 1161.2903225806451, 1200.0 },
            440.0,
            juce::String("31-edo"),
            juce::String("The octave divided into 31 equal steps"),
            1200.0,
            31.0,
        };

        auto tuning = FunctionalTuning(definition);

        const double expectedRatioTable[size] = { 1.0226114356012683, 1.0457341482224871, 1.0693796985710673, 1.0935599087586108, 1.1182868682116351, 1.1435729397159466, 1.169430765597687, 1.1958732740441411, 1.2229136855674683, 1.2505655196145868, 1.2788426013265188, 1.307759068450572, 1.337329378408817, 1.3675683155263922, 1.3984909984232523, 1.4301128875730533, 1.4624497930329556, 1.4955178823482085, 1.5293336886354705, 1.5639141188489016, 1.5992764622331679, 1.6354383989675778, 1.6724180090056746, 1.710233781114708, 1.748904622119497, 1.7884498663553128, 1.8288892853345031, 1.8702430976316942, 1.9125319789925097, 1.9557770726708654, 2.0 };

        const int rootIndex = 178;
        const int tableSize = 329;
        const double* expectedFrequencyTable = new double[tableSize] { 8.22162876, 8.40753159, 8.59763795, 8.79204288, 8.9908436, 9.19413948, 9.40203217, 9.61462561, 9.8320261, 10.05434233, 10.28168544, 10.51416911, 10.75190957, 10.99502568, 11.24363899, 11.49787381, 11.75785725, 12.02371928, 12.29559283, 12.57361384, 12.8579213, 13.14865736, 13.44596737, 13.75, 14.06090724, 14.37884454, 14.70397086, 15.03644875, 15.37644444, 15.72412792, 16.07967303, 16.44325752, 16.81506318, 17.19527589, 17.58408577, 17.98168719, 18.38827895, 18.80406434, 19.22925123, 19.6640522, 20.10868465, 20.56337088, 21.02833822, 21.50381913, 21.99005136, 22.48727799, 22.99574762, 23.51571449, 24.04743855, 24.59118566, 25.14722767, 25.71584259, 26.29731471, 26.89193475, 27.5, 28.12181448, 28.75768908, 29.40794171, 30.07289749, 30.75288888, 31.44825584, 32.15934605, 32.88651504, 33.63012635, 34.39055179, 35.16817154, 35.96337438, 36.77655791, 37.60812868, 38.45850246, 39.32810441, 40.21736931, 41.12674176, 42.05667644, 43.00763827, 43.98010271, 44.97455597, 45.99149525, 47.03142898, 48.09487711, 49.18237132, 50.29445535, 51.43168518, 52.59462942, 53.7838695, 55, 56.24362896, 57.51537815, 58.81588342, 60.14579498, 61.50577775, 62.89651168, 64.31869211, 65.77303007, 67.26025271, 68.78110358, 70.33634307, 71.92674876, 73.55311581, 75.21625735, 76.91700491, 78.65620882, 80.43473862, 82.25348353, 84.11335287, 86.01527654, 87.96020542, 89.94911194, 91.9829905, 94.06285796, 96.18975422, 98.36474265, 100.58891069, 102.86337037, 105.18925884, 107.567739, 110, 112.48725792, 115.0307563, 117.63176684, 120.29158996, 123.0115555, 125.79302337, 128.63738422, 131.54606014, 134.52050541, 137.56220716, 140.67268615, 143.85349753, 147.10623162, 150.43251471, 153.83400983, 157.31241763, 160.86947723, 164.50696706, 168.22670575, 172.03055307, 175.92041085, 179.89822389, 183.96598099, 188.12571592, 192.37950843, 196.7294853, 201.17782139, 205.72674074, 210.37851769, 215.13547799, 220, 224.97451583, 230.06151261, 235.26353369, 240.58317993, 246.02311101, 251.58604674, 257.27476843, 263.09212029, 269.04101082, 275.12441432, 281.34537229, 287.70699506, 294.21246325, 300.86502942, 307.66801965, 314.62483527, 321.73895447, 329.01393412, 336.4534115, 344.06110615, 351.84082169, 359.79644777, 367.93196198, 376.25143185, 384.75901687, 393.4589706, 402.35564277, 411.45348148, 420.75703538, 430.27095599, 440, 449.94903166, 460.12302522, 470.52706737, 481.16635985, 492.04622201, 503.17209348, 514.54953686, 526.18424058, 538.08202165, 550.24882863, 562.69074458, 575.41399012, 588.4249265, 601.73005883, 615.33603931, 629.24967053, 643.47790893, 658.02786823, 672.906823, 688.12221229, 703.68164338, 719.59289555, 735.86392396, 752.50286369, 769.51803373, 786.9179412, 804.71128555, 822.90696296, 841.51407076, 860.54191198, 880, 899.89806333, 920.24605044, 941.05413474, 962.33271971, 984.09244403, 1006.34418695, 1029.09907373, 1052.36848116, 1076.1640433, 1100.49765726, 1125.38148917, 1150.82798024, 1176.849853, 1203.46011766, 1230.67207861, 1258.49934106, 1286.95581787, 1316.05573647, 1345.813646, 1376.24442459, 1407.36328677, 1439.18579109, 1471.72784792, 1505.00572738, 1539.03606747, 1573.83588239, 1609.42257109, 1645.81392592, 1683.02814151, 1721.08382395, 1760, 1799.79612666, 1840.49210087, 1882.10826949, 1924.66543942, 1968.18488805, 2012.6883739, 2058.19814745, 2104.73696232, 2152.3280866, 2200.99531452, 2250.76297833, 2301.65596047, 2353.699706, 2406.92023533, 2461.34415722, 2516.99868213, 2573.91163574, 2632.11147293, 2691.627292, 2752.48884917, 2814.72657353, 2878.37158218, 2943.45569585, 3010.01145476, 3078.07213493, 3147.67176479, 3218.84514219, 3291.62785183, 3366.05628303, 3442.1676479, 3520, 3599.59225332, 3680.98420174, 3764.21653897, 3849.33087883, 3936.3697761, 4025.3767478, 4116.3962949, 4209.47392464, 4304.6561732, 4401.99062904, 4501.52595667, 4603.31192095, 4707.399412, 4813.84047065, 4922.68831445, 5033.99736426, 5147.82327148, 5264.22294587, 5383.254584, 5504.97769835, 5629.45314706, 5756.74316437, 5886.9113917, 6020.02290952, 6156.14426986, 6295.34352957, 6437.69028438, 6583.25570366, 6732.11256605, 6884.3352958, 7040, 7199.18450663, 7361.96840349, 7528.43307794, 7698.66175766, 7872.73955221, 8050.7534956, 8232.79258981, 8418.94784927, 8609.31234639, 8803.98125809, 9003.05191334, 9206.62384189, 9414.798824, 9627.68094131, 9845.3766289, 10067.99472851, 10295.64654295, 10528.44589173, 10766.50916799, 11009.9553967, 11258.90629412, 11513.48632873, 11773.8227834, 12040.04581905, 12312.28853972, 12590.68705914 };
        const double* expectedMtsTable = new double[tableSize] { 0.09677419, 0.48387097, 0.87096774, 1.25806452, 1.64516129, 2.03225806, 2.41935484, 2.80645161, 3.19354839, 3.58064516, 3.96774194, 4.35483871, 4.74193548, 5.12903226, 5.51612903, 5.90322581, 6.29032258, 6.67741935, 7.06451613, 7.4516129, 7.83870968, 8.22580645, 8.61290323, 9, 9.38709677, 9.77419355, 10.16129032, 10.5483871, 10.93548387, 11.32258065, 11.70967742, 12.09677419, 12.48387097, 12.87096774, 13.25806452, 13.64516129, 14.03225806, 14.41935484, 14.80645161, 15.19354839, 15.58064516, 15.96774194, 16.35483871, 16.74193548, 17.12903226, 17.51612903, 17.90322581, 18.29032258, 18.67741935, 19.06451613, 19.4516129, 19.83870968, 20.22580645, 20.61290323, 21, 21.38709677, 21.77419355, 22.16129032, 22.5483871, 22.93548387, 23.32258065, 23.70967742, 24.09677419, 24.48387097, 24.87096774, 25.25806452, 25.64516129, 26.03225806, 26.41935484, 26.80645161, 27.19354839, 27.58064516, 27.96774194, 28.35483871, 28.74193548, 29.12903226, 29.51612903, 29.90322581, 30.29032258, 30.67741935, 31.06451613, 31.4516129, 31.83870968, 32.22580645, 32.61290323, 33, 33.38709677, 33.77419355, 34.16129032, 34.5483871, 34.93548387, 35.32258065, 35.70967742, 36.09677419, 36.48387097, 36.87096774, 37.25806452, 37.64516129, 38.03225806, 38.41935484, 38.80645161, 39.19354839, 39.58064516, 39.96774194, 40.35483871, 40.74193548, 41.12903226, 41.51612903, 41.90322581, 42.29032258, 42.67741935, 43.06451613, 43.4516129, 43.83870968, 44.22580645, 44.61290323, 45, 45.38709677, 45.77419355, 46.16129032, 46.5483871, 46.93548387, 47.32258065, 47.70967742, 48.09677419, 48.48387097, 48.87096774, 49.25806452, 49.64516129, 50.03225806, 50.41935484, 50.80645161, 51.19354839, 51.58064516, 51.96774194, 52.35483871, 52.74193548, 53.12903226, 53.51612903, 53.90322581, 54.29032258, 54.67741935, 55.06451613, 55.4516129, 55.83870968, 56.22580645, 56.61290323, 57, 57.38709677, 57.77419355, 58.16129032, 58.5483871, 58.93548387, 59.32258065, 59.70967742, 60.09677419, 60.48387097, 60.87096774, 61.25806452, 61.64516129, 62.03225806, 62.41935484, 62.80645161, 63.19354839, 63.58064516, 63.96774194, 64.35483871, 64.74193548, 65.12903226, 65.51612903, 65.90322581, 66.29032258, 66.67741935, 67.06451613, 67.4516129, 67.83870968, 68.22580645, 68.61290323, 69, 69.38709677, 69.77419355, 70.16129032, 70.5483871, 70.93548387, 71.32258065, 71.70967742, 72.09677419, 72.48387097, 72.87096774, 73.25806452, 73.64516129, 74.03225806, 74.41935484, 74.80645161, 75.19354839, 75.58064516, 75.96774194, 76.35483871, 76.74193548, 77.12903226, 77.51612903, 77.90322581, 78.29032258, 78.67741935, 79.06451613, 79.4516129, 79.83870968, 80.22580645, 80.61290323, 81, 81.38709677, 81.77419355, 82.16129032, 82.5483871, 82.93548387, 83.32258065, 83.70967742, 84.09677419, 84.48387097, 84.87096774, 85.25806452, 85.64516129, 86.03225806, 86.41935484, 86.80645161, 87.19354839, 87.58064516, 87.96774194, 88.35483871, 88.74193548, 89.12903226, 89.51612903, 89.90322581, 90.29032258, 90.67741935, 91.06451613, 91.4516129, 91.83870968, 92.22580645, 92.61290323, 93, 93.38709677, 93.77419355, 94.16129032, 94.5483871, 94.93548387, 95.32258065, 95.70967742, 96.09677419, 96.48387097, 96.87096774, 97.25806452, 97.64516129, 98.03225806, 98.41935484, 98.80645161, 99.19354839, 99.58064516, 99.96774194, 100.35483871, 100.74193548, 101.12903226, 101.51612903, 101.90322581, 102.29032258, 102.67741935, 103.06451613, 103.4516129, 103.83870968, 104.22580645, 104.61290323, 105, 105.38709677, 105.77419355, 106.16129032, 106.5483871, 106.93548387, 107.32258065, 107.70967742, 108.09677419, 108.48387097, 108.87096774, 109.25806452, 109.64516129, 110.03225806, 110.41935484, 110.80645161, 111.19354839, 111.58064516, 111.96774194, 112.35483871, 112.74193548, 113.12903226, 113.51612903, 113.90322581, 114.29032258, 114.67741935, 115.06451613, 115.4516129, 115.83870968, 116.22580645, 116.61290323, 117, 117.38709677, 117.77419355, 118.16129032, 118.5483871, 118.93548387, 119.32258065, 119.70967742, 120.09677419, 120.48387097, 120.87096774, 121.25806452, 121.64516129, 122.03225806, 122.41935484, 122.80645161, 123.19354839, 123.58064516, 123.96774194, 124.35483871, 124.74193548, 125.12903226, 125.51612903, 125.90322581, 126.29032258, 126.67741935, 127.06451613 };

        const double newRootFrequecy = 256.0;
        const int newRootIndex = 154;
        const int newTableSize = 329;
        const double* newExpectedFrequencyTable = new double [tableSize] { 8.18089148, 8.36587319, 8.55503759, 8.74847927, 8.94629495, 9.14858352, 9.35544612, 9.56698619, 9.78330948, 10.00452416, 10.23074081, 10.46207255, 10.69863503, 10.94054652, 11.18792799, 11.4409031, 11.69959834, 11.96414306, 12.23466951, 12.51131295, 12.7942117, 13.08350719, 13.37934407, 13.68187025, 13.99123698, 14.30759893, 14.63111428, 14.96194478, 15.30025583, 15.64621658, 16, 16.36178297, 16.73174637, 17.11007518, 17.49695854, 17.89258989, 18.29716704, 18.71089225, 19.13397238, 19.56661897, 20.00904831, 20.46148162, 20.9241451, 21.39727005, 21.88109305, 22.37585597, 22.8818062, 23.39919669, 23.92828612, 24.46933902, 25.0226259, 25.5884234, 26.16701438, 26.75868814, 27.3637405, 27.98247395, 28.61519786, 29.26222857, 29.92388956, 30.60051166, 31.29243316, 32, 32.72356594, 33.46349274, 34.22015035, 34.99391708, 35.78517978, 36.59433407, 37.4217845, 38.26794477, 39.13323794, 40.01809663, 40.92296324, 41.84829019, 42.79454011, 43.7621861, 44.75171195, 45.7636124, 46.79839338, 47.85657224, 48.93867804, 50.0452518, 51.17684679, 52.33402877, 53.51737629, 54.727481, 55.96494791, 57.23039572, 58.52445713, 59.84777912, 61.20102333, 62.58486633, 64, 65.44713188, 66.92698549, 68.44030071, 69.98783416, 71.57035957, 73.18866814, 74.843569, 76.53588954, 78.26647588, 80.03619326, 81.84592648, 83.69658038, 85.58908022, 87.52437219, 89.5034239, 91.5272248, 93.59678675, 95.71314447, 97.87735607, 100.09050361, 102.35369358, 104.66805753, 107.03475258, 109.45496199, 111.92989582, 114.46079145, 117.04891426, 119.69555825, 122.40204666, 125.16973265, 128, 130.89426376, 133.85397097, 136.88060142, 139.97566832, 143.14071913, 146.37733628, 149.687138, 153.07177908, 156.53295175, 160.07238651, 163.69185297, 167.39316076, 171.17816044, 175.04874439, 179.0068478, 183.05444961, 187.19357351, 191.42628894, 195.75471215, 200.18100721, 204.70738717, 209.33611507, 214.06950515, 218.90992398, 223.85979163, 228.92158289, 234.09782852, 239.3911165, 244.80409331, 250.3394653, 256, 261.78852751, 267.70794194, 273.76120283, 279.95133664, 286.28143826, 292.75467257, 299.37427599, 306.14355816, 313.06590351, 320.14477302, 327.38370594, 334.78632152, 342.35632087, 350.09748877, 358.0136956, 366.10889922, 374.38714702, 382.85257788, 391.50942429, 400.36201443, 409.41477433, 418.67223014, 428.13901031, 437.81984797, 447.71958326, 457.84316579, 468.19565705, 478.78223299, 489.60818662, 500.6789306, 512, 523.57705503, 535.41588389, 547.52240567, 559.90267328, 572.56287652, 585.50934513, 598.74855199, 612.28711631, 626.13180701, 640.28954604, 654.76741188, 669.57264305, 684.71264175, 700.19497755, 716.02739119, 732.21779844, 748.77429403, 765.70515576, 783.01884858, 800.72402885, 818.82954866, 837.34446027, 856.27802061, 875.63969593, 895.43916653, 915.68633157, 936.39131409, 957.56446599, 979.21637324, 1001.35786121, 1024, 1047.15411006, 1070.83176778, 1095.04481134, 1119.80534657, 1145.12575305, 1171.01869027, 1197.49710397, 1224.57423262, 1252.26361402, 1280.57909209, 1309.53482376, 1339.14528609, 1369.42528349, 1400.3899551, 1432.05478239, 1464.43559687, 1497.54858807, 1531.41031152, 1566.03769716, 1601.4480577, 1637.65909733, 1674.68892054, 1712.55604122, 1751.27939186, 1790.87833305, 1831.37266315, 1872.78262818, 1915.12893197, 1958.43274649, 2002.71572241, 2048, 2094.30822011, 2141.66353556, 2190.08962267, 2239.61069314, 2290.2515061, 2342.03738054, 2394.99420794, 2449.14846524, 2504.52722804, 2561.15818417, 2619.06964752, 2678.29057219, 2738.85056698, 2800.7799102, 2864.10956477, 2928.87119375, 2995.09717613, 3062.82062305, 3132.07539433, 3202.8961154, 3275.31819465, 3349.37784109, 3425.11208244, 3502.55878372, 3581.7566661, 3662.7453263, 3745.56525637, 3830.25786395, 3916.86549298, 4005.43144483, 4096, 4188.61644022, 4283.32707112, 4380.17924535, 4479.22138628, 4580.50301219, 4684.07476108, 4789.98841589, 4898.29693048, 5009.05445608, 5122.31636834, 5238.13929503, 5356.58114437, 5477.70113396, 5601.5598204, 5728.21912954, 5857.7423875, 5990.19435226, 6125.6412461, 6264.15078865, 6405.79223081, 6550.63638931, 6698.75568217, 6850.22416489, 7005.11756745, 7163.5133322, 7325.49065259, 7491.13051273, 7660.5157279, 7833.73098595, 8010.86288966, 8192, 8377.23288045, 8566.65414224, 8760.35849069, 8958.44277255, 9161.00602439, 9368.14952215, 9579.97683178, 9796.59386097, 10018.10891217, 10244.63273668, 10476.27859007, 10713.16228875, 10955.40226793, 11203.11964079, 11456.43825908, 11715.484775, 11980.38870453, 12251.2824922, 12528.3015773 };
        const double* newExpectedMtsTable = new double[tableSize] { 0.01078021, 0.39787699, 0.78497376, 1.17207053, 1.55916731, 1.94626408, 2.33336086, 2.72045763, 3.10755441, 3.49465118, 3.88174795, 4.26884473, 4.6559415, 5.04303828, 5.43013505, 5.81723182, 6.2043286, 6.59142537, 6.97852215, 7.36561892, 7.7527157, 8.13981247, 8.52690924, 8.91400602, 9.30110279, 9.68819957, 10.07529634, 10.46239312, 10.84948989, 11.23658666, 11.62368344, 12.01078021, 12.39787699, 12.78497376, 13.17207053, 13.55916731, 13.94626408, 14.33336086, 14.72045763, 15.10755441, 15.49465118, 15.88174795, 16.26884473, 16.6559415, 17.04303828, 17.43013505, 17.81723182, 18.2043286, 18.59142537, 18.97852215, 19.36561892, 19.7527157, 20.13981247, 20.52690924, 20.91400602, 21.30110279, 21.68819957, 22.07529634, 22.46239312, 22.84948989, 23.23658666, 23.62368344, 24.01078021, 24.39787699, 24.78497376, 25.17207053, 25.55916731, 25.94626408, 26.33336086, 26.72045763, 27.10755441, 27.49465118, 27.88174795, 28.26884473, 28.6559415, 29.04303828, 29.43013505, 29.81723182, 30.2043286, 30.59142537, 30.97852215, 31.36561892, 31.7527157, 32.13981247, 32.52690924, 32.91400602, 33.30110279, 33.68819957, 34.07529634, 34.46239312, 34.84948989, 35.23658666, 35.62368344, 36.01078021, 36.39787699, 36.78497376, 37.17207053, 37.55916731, 37.94626408, 38.33336086, 38.72045763, 39.10755441, 39.49465118, 39.88174795, 40.26884473, 40.6559415, 41.04303828, 41.43013505, 41.81723182, 42.2043286, 42.59142537, 42.97852215, 43.36561892, 43.7527157, 44.13981247, 44.52690924, 44.91400602, 45.30110279, 45.68819957, 46.07529634, 46.46239312, 46.84948989, 47.23658666, 47.62368344, 48.01078021, 48.39787699, 48.78497376, 49.17207053, 49.55916731, 49.94626408, 50.33336086, 50.72045763, 51.10755441, 51.49465118, 51.88174795, 52.26884473, 52.6559415, 53.04303828, 53.43013505, 53.81723182, 54.2043286, 54.59142537, 54.97852215, 55.36561892, 55.7527157, 56.13981247, 56.52690924, 56.91400602, 57.30110279, 57.68819957, 58.07529634, 58.46239312, 58.84948989, 59.23658666, 59.62368344, 60.01078021, 60.39787699, 60.78497376, 61.17207053, 61.55916731, 61.94626408, 62.33336086, 62.72045763, 63.10755441, 63.49465118, 63.88174795, 64.26884473, 64.6559415, 65.04303828, 65.43013505, 65.81723182, 66.2043286, 66.59142537, 66.97852215, 67.36561892, 67.7527157, 68.13981247, 68.52690924, 68.91400602, 69.30110279, 69.68819957, 70.07529634, 70.46239312, 70.84948989, 71.23658666, 71.62368344, 72.01078021, 72.39787699, 72.78497376, 73.17207053, 73.55916731, 73.94626408, 74.33336086, 74.72045763, 75.10755441, 75.49465118, 75.88174795, 76.26884473, 76.6559415, 77.04303828, 77.43013505, 77.81723182, 78.2043286, 78.59142537, 78.97852215, 79.36561892, 79.7527157, 80.13981247, 80.52690924, 80.91400602, 81.30110279, 81.68819957, 82.07529634, 82.46239312, 82.84948989, 83.23658666, 83.62368344, 84.01078021, 84.39787699, 84.78497376, 85.17207053, 85.55916731, 85.94626408, 86.33336086, 86.72045763, 87.10755441, 87.49465118, 87.88174795, 88.26884473, 88.6559415, 89.04303828, 89.43013505, 89.81723182, 90.2043286, 90.59142537, 90.97852215, 91.36561892, 91.7527157, 92.13981247, 92.52690924, 92.91400602, 93.30110279, 93.68819957, 94.07529634, 94.46239312, 94.84948989, 95.23658666, 95.62368344, 96.01078021, 96.39787699, 96.78497376, 97.17207053, 97.55916731, 97.94626408, 98.33336086, 98.72045763, 99.10755441, 99.49465118, 99.88174795, 100.26884473, 100.6559415, 101.04303828, 101.43013505, 101.81723182, 102.2043286, 102.59142537, 102.97852215, 103.36561892, 103.7527157, 104.13981247, 104.52690924, 104.91400602, 105.30110279, 105.68819957, 106.07529634, 106.46239312, 106.84948989, 107.23658666, 107.62368344, 108.01078021, 108.39787699, 108.78497376, 109.17207053, 109.55916731, 109.94626408, 110.33336086, 110.72045763, 111.10755441, 111.49465118, 111.88174795, 112.26884473, 112.6559415, 113.04303828, 113.43013505, 113.81723182, 114.2043286, 114.59142537, 114.97852215, 115.36561892, 115.7527157, 116.13981247, 116.52690924, 116.91400602, 117.30110279, 117.68819957, 118.07529634, 118.46239312, 118.84948989, 119.23658666, 119.62368344, 120.01078021, 120.39787699, 120.78497376, 121.17207053, 121.55916731, 121.94626408, 122.33336086, 122.72045763, 123.10755441, 123.49465118, 123.88174795, 124.26884473, 124.6559415, 125.04303828, 125.43013505, 125.81723182, 126.2043286, 126.59142537, 126.97852215 };
        
        const int expectedStandardOutput[128] = { 0, 2, 5, 7, 10, 13, 15, 18, 20, 23, 26, 28, 31, 33, 36, 38, 41, 44, 46, 49, 51, 54, 57, 59, 62, 64, 67, 69, 72, 75, 77, 80, 82, 85, 88, 90, 93, 95, 98, 100, 103, 106, 108, 111, 113, 116, 119, 121, 124, 126, 129, 131, 134, 137, 139, 142, 144, 147, 150, 152, 155, 157, 160, 162, 165, 168, 170, 173, 175, 178, 181, 183, 186, 188, 191, 193, 196, 199, 201, 204, 206, 209, 212, 214, 217, 219, 222, 224, 227, 230, 232, 235, 237, 240, 243, 245, 248, 250, 253, 255, 258, 261, 263, 266, 268, 271, 274, 276, 279, 281, 284, 286, 289, 292, 294, 297, 299, 302, 305, 307, 310, 312, 315, 317, 320, 323, 325, 328 };
        const double expectedMtsStandardOutput[128] = { 0.09677419, 0.87096774, 2.03225806, 2.80645161, 3.96774194, 5.12903226, 5.90322581, 7.06451613, 7.83870968, 9, 10.16129032, 10.93548387, 12.09677419, 12.87096774, 14.03225806, 14.80645161, 15.96774194, 17.12903226, 17.90322581, 19.06451613, 19.83870968, 21, 22.16129032, 22.93548387, 24.09677419, 24.87096774, 26.03225806, 26.80645161, 27.96774194, 29.12903226, 29.90322581, 31.06451613, 31.83870968, 33, 34.16129032, 34.93548387, 36.09677419, 36.87096774, 38.03225806, 38.80645161, 39.96774194, 41.12903226, 41.90322581, 43.06451613, 43.83870968, 45, 46.16129032, 46.93548387, 48.09677419, 48.87096774, 50.03225806, 50.80645161, 51.96774194, 53.12903226, 53.90322581, 55.06451613, 55.83870968, 57, 58.16129032, 58.93548387, 60.09677419, 60.87096774, 62.03225806, 62.80645161, 63.96774194, 65.12903226, 65.90322581, 67.06451613, 67.83870968, 69, 70.16129032, 70.93548387, 72.09677419, 72.87096774, 74.03225806, 74.80645161, 75.96774194, 77.12903226, 77.90322581, 79.06451613, 79.83870968, 81, 82.16129032, 82.93548387, 84.09677419, 84.87096774, 86.03225806, 86.80645161, 87.96774194, 89.12903226, 89.90322581, 91.06451613, 91.83870968, 93, 94.16129032, 94.93548387, 96.09677419, 96.87096774, 98.03225806, 98.80645161, 99.96774194, 101.12903226, 101.90322581, 103.06451613, 103.83870968, 105, 106.16129032, 106.93548387, 108.09677419, 108.87096774, 110.03225806, 110.80645161, 111.96774194, 113.12903226, 113.90322581, 115.06451613, 115.83870968, 117, 118.16129032, 118.93548387, 120.09677419, 120.87096774, 122.03225806, 122.80645161, 123.96774194, 125.12903226, 125.90322581, 127.06451613 };

        // 53-edo with root at 261.6255653 Hz, start index 117
        const int indexTextSize = tableSize;
        const double* closestIndexInput = new double[tableSize] { 26.49056604, 26.71698113, 26.94339623, 27.16981132, 27.39622642, 27.62264151, 27.8490566, 28.0754717, 28.30188679, 28.52830189, 28.75471698, 28.98113208, 29.20754717, 29.43396226, 29.66037736, 29.88679245, 30.11320755, 30.33962264, 30.56603774, 30.79245283, 31.01886792, 31.24528302, 31.47169811, 31.69811321, 31.9245283, 32.1509434, 32.37735849, 32.60377358, 32.83018868, 33.05660377, 33.28301887, 33.50943396, 33.73584906, 33.96226415, 34.18867925, 34.41509434, 34.64150943, 34.86792453, 35.09433962, 35.32075472, 35.54716981, 35.77358491, 36, 36.22641509, 36.45283019, 36.67924528, 36.90566038, 37.13207547, 37.35849057, 37.58490566, 37.81132075, 38.03773585, 38.26415094, 38.49056604, 38.71698113, 38.94339623, 39.16981132, 39.39622642, 39.62264151, 39.8490566, 40.0754717, 40.30188679, 40.52830189, 40.75471698, 40.98113208, 41.20754717, 41.43396226, 41.66037736, 41.88679245, 42.11320755, 42.33962264, 42.56603774, 42.79245283, 43.01886792, 43.24528302, 43.47169811, 43.69811321, 43.9245283, 44.1509434, 44.37735849, 44.60377358, 44.83018868, 45.05660377, 45.28301887, 45.50943396, 45.73584906, 45.96226415, 46.18867925, 46.41509434, 46.64150943, 46.86792453, 47.09433962, 47.32075472, 47.54716981, 47.77358491, 48, 48.22641509, 48.45283019, 48.67924528, 48.90566038, 49.13207547, 49.35849057, 49.58490566, 49.81132075, 50.03773585, 50.26415094, 50.49056604, 50.71698113, 50.94339623, 51.16981132, 51.39622642, 51.62264151, 51.8490566, 52.0754717, 52.30188679, 52.52830189, 52.75471698, 52.98113208, 53.20754717, 53.43396226, 53.66037736, 53.88679245, 54.11320755, 54.33962264, 54.56603774, 54.79245283, 55.01886792, 55.24528302, 55.47169811, 55.69811321, 55.9245283, 56.1509434, 56.37735849, 56.60377358, 56.83018868, 57.05660377, 57.28301887, 57.50943396, 57.73584906, 57.96226415, 58.18867925, 58.41509434, 58.64150943, 58.86792453, 59.09433962, 59.32075472, 59.54716981, 59.77358491, 60, 60.22641509, 60.45283019, 60.67924528, 60.90566038, 61.13207547, 61.35849057, 61.58490566, 61.81132075, 62.03773585, 62.26415094, 62.49056604, 62.71698113, 62.94339623, 63.16981132, 63.39622642, 63.62264151, 63.8490566, 64.0754717, 64.30188679, 64.52830189, 64.75471698, 64.98113208, 65.20754717, 65.43396226, 65.66037736, 65.88679245, 66.11320755, 66.33962264, 66.56603774, 66.79245283, 67.01886792, 67.24528302, 67.47169811, 67.69811321, 67.9245283, 68.1509434, 68.37735849, 68.60377358, 68.83018868, 69.05660377, 69.28301887, 69.50943396, 69.73584906, 69.96226415, 70.18867925, 70.41509434, 70.64150943, 70.86792453, 71.09433962, 71.32075472, 71.54716981, 71.77358491, 72, 72.22641509, 72.45283019, 72.67924528, 72.90566038, 73.13207547, 73.35849057, 73.58490566, 73.81132075, 74.03773585, 74.26415094, 74.49056604, 74.71698113, 74.94339623, 75.16981132, 75.39622642, 75.62264151, 75.8490566, 76.0754717, 76.30188679, 76.52830189, 76.75471698, 76.98113208, 77.20754717, 77.43396226, 77.66037736, 77.88679245, 78.11320755, 78.33962264, 78.56603774, 78.79245283, 79.01886792, 79.24528302, 79.47169811, 79.69811321, 79.9245283, 80.1509434, 80.37735849, 80.60377358, 80.83018868, 81.05660377, 81.28301887, 81.50943396, 81.73584906, 81.96226415, 82.18867925, 82.41509434, 82.64150943, 82.86792453, 83.09433962, 83.32075472, 83.54716981, 83.77358491, 84, 84.22641509, 84.45283019, 84.67924528, 84.90566038, 85.13207547, 85.35849057, 85.58490566, 85.81132075, 86.03773585, 86.26415094, 86.49056604, 86.71698113, 86.94339623, 87.16981132, 87.39622642, 87.62264151, 87.8490566, 88.0754717, 88.30188679, 88.52830189, 88.75471698, 88.98113208, 89.20754717, 89.43396226, 89.66037736, 89.88679245, 90.11320755, 90.33962264, 90.56603774, 90.79245283, 91.01886792, 91.24528302, 91.47169811, 91.69811321, 91.9245283, 92.1509434, 92.37735849, 92.60377358, 92.83018868, 93.05660377, 93.28301887, 93.50943396, 93.73584906, 93.96226415, 94.18867925, 94.41509434, 94.64150943, 94.86792453, 95.09433962, 95.32075472, 95.54716981, 95.77358491, 96, 96.22641509, 96.45283019, 96.67924528, 96.90566038, 97.13207547, 97.35849057, 97.58490566, 97.81132075, 98.03773585, 98.26415094, 98.49056604, 98.71698113, 98.94339623, 99.16981132, 99.39622642, 99.62264151, 99.8490566, 100.0754717, 100.30188679, 100.52830189, 100.75471698 };
        const int* expectedIndexOutput = new int[tableSize] { 68, 69, 69, 70, 71, 71, 72, 72, 73, 73, 74, 75, 75, 76, 76, 77, 78, 78, 79, 79, 80, 80, 81, 82, 82, 83, 83, 84, 85, 85, 86, 86, 87, 87, 88, 89, 89, 90, 90, 91, 92, 92, 93, 93, 94, 95, 95, 96, 96, 97, 97, 98, 99, 99, 100, 100, 101, 102, 102, 103, 103, 104, 104, 105, 106, 106, 107, 107, 108, 109, 109, 110, 110, 111, 111, 112, 113, 113, 114, 114, 115, 116, 116, 117, 117, 118, 118, 119, 120, 120, 121, 121, 122, 123, 123, 124, 124, 125, 126, 126, 127, 127, 128, 128, 129, 130, 130, 131, 131, 132, 133, 133, 134, 134, 135, 135, 136, 137, 137, 138, 138, 139, 140, 140, 141, 141, 142, 142, 143, 144, 144, 145, 145, 146, 147, 147, 148, 148, 149, 149, 150, 151, 151, 152, 152, 153, 154, 154, 155, 155, 156, 157, 157, 158, 158, 159, 159, 160, 161, 161, 162, 162, 163, 164, 164, 165, 165, 166, 166, 167, 168, 168, 169, 169, 170, 171, 171, 172, 172, 173, 173, 174, 175, 175, 176, 176, 177, 178, 178, 179, 179, 180, 180, 181, 182, 182, 183, 183, 184, 185, 185, 186, 186, 187, 188, 188, 189, 189, 190, 190, 191, 192, 192, 193, 193, 194, 195, 195, 196, 196, 197, 197, 198, 199, 199, 200, 200, 201, 202, 202, 203, 203, 204, 204, 205, 206, 206, 207, 207, 208, 209, 209, 210, 210, 211, 211, 212, 213, 213, 214, 214, 215, 216, 216, 217, 217, 218, 219, 219, 220, 220, 221, 221, 222, 223, 223, 224, 224, 225, 226, 226, 227, 227, 228, 228, 229, 230, 230, 231, 231, 232, 233, 233, 234, 234, 235, 235, 236, 237, 237, 238, 238, 239, 240, 240, 241, 241, 242, 242, 243, 244, 244, 245, 245, 246, 247, 247, 248, 248, 249, 250, 250, 251, 251, 252, 252, 253, 254, 254, 255, 255, 256, 257, 257, 258, 258, 259, 259, 260 };
        const double* expectedIndexMtsOutput = new double[tableSize] { 26.41935484, 26.80645161, 26.80645161, 27.19354839, 27.58064516, 27.58064516, 27.96774193, 27.96774193, 28.35483871, 28.35483871, 28.74193548, 29.12903226, 29.12903226, 29.51612903, 29.51612903, 29.90322581, 30.29032258, 30.29032258, 30.67741936, 30.67741936, 31.06451613, 31.06451613, 31.4516129, 31.83870968, 31.83870968, 32.22580645, 32.22580645, 32.61290323, 33, 33, 33.38709677, 33.38709677, 33.77419355, 33.77419355, 34.16129032, 34.5483871, 34.5483871, 34.93548387, 34.93548387, 35.32258064, 35.70967742, 35.70967742, 36.09677419, 36.09677419, 36.48387097, 36.87096774, 36.87096774, 37.25806452, 37.25806452, 37.64516129, 37.64516129, 38.03225806, 38.41935484, 38.41935484, 38.80645161, 38.80645161, 39.19354839, 39.58064516, 39.58064516, 39.96774194, 39.96774194, 40.35483871, 40.35483871, 40.74193548, 41.12903226, 41.12903226, 41.51612903, 41.51612903, 41.90322581, 42.29032258, 42.29032258, 42.67741936, 42.67741936, 43.06451613, 43.06451613, 43.4516129, 43.83870968, 43.83870968, 44.22580645, 44.22580645, 44.61290323, 45, 45, 45.38709677, 45.38709677, 45.77419355, 45.77419355, 46.16129032, 46.5483871, 46.5483871, 46.93548387, 46.93548387, 47.32258065, 47.70967742, 47.70967742, 48.09677419, 48.09677419, 48.48387097, 48.87096774, 48.87096774, 49.25806452, 49.25806452, 49.64516129, 49.64516129, 50.03225806, 50.41935484, 50.41935484, 50.80645161, 50.80645161, 51.19354839, 51.58064516, 51.58064516, 51.96774194, 51.96774194, 52.35483871, 52.35483871, 52.74193548, 53.12903226, 53.12903226, 53.51612903, 53.51612903, 53.90322581, 54.29032258, 54.29032258, 54.67741935, 54.67741935, 55.06451613, 55.06451613, 55.4516129, 55.83870968, 55.83870968, 56.22580645, 56.22580645, 56.61290323, 57, 57, 57.38709677, 57.38709677, 57.77419355, 57.77419355, 58.16129032, 58.5483871, 58.5483871, 58.93548387, 58.93548387, 59.32258065, 59.70967742, 59.70967742, 60.09677419, 60.09677419, 60.48387097, 60.87096774, 60.87096774, 61.25806452, 61.25806452, 61.64516129, 61.64516129, 62.03225806, 62.41935484, 62.41935484, 62.80645161, 62.80645161, 63.19354839, 63.58064516, 63.58064516, 63.96774194, 63.96774194, 64.35483871, 64.35483871, 64.74193548, 65.12903226, 65.12903226, 65.51612903, 65.51612903, 65.90322581, 66.29032258, 66.29032258, 66.67741936, 66.67741936, 67.06451613, 67.06451613, 67.4516129, 67.83870968, 67.83870968, 68.22580645, 68.22580645, 68.61290323, 69, 69, 69.38709677, 69.38709677, 69.77419355, 69.77419355, 70.16129032, 70.5483871, 70.5483871, 70.93548387, 70.93548387, 71.32258065, 71.70967742, 71.70967742, 72.09677419, 72.09677419, 72.48387097, 72.87096774, 72.87096774, 73.25806452, 73.25806452, 73.64516129, 73.64516129, 74.03225806, 74.41935484, 74.41935484, 74.80645161, 74.80645161, 75.19354839, 75.58064516, 75.58064516, 75.96774194, 75.96774194, 76.35483871, 76.35483871, 76.74193548, 77.12903226, 77.12903226, 77.51612903, 77.51612903, 77.90322581, 78.29032258, 78.29032258, 78.67741935, 78.67741935, 79.06451613, 79.06451613, 79.4516129, 79.83870968, 79.83870968, 80.22580645, 80.22580645, 80.61290323, 81, 81, 81.38709677, 81.38709677, 81.77419355, 81.77419355, 82.16129032, 82.5483871, 82.5483871, 82.93548387, 82.93548387, 83.32258065, 83.70967742, 83.70967742, 84.09677419, 84.09677419, 84.48387097, 84.87096774, 84.87096774, 85.25806452, 85.25806452, 85.64516129, 85.64516129, 86.03225806, 86.41935484, 86.41935484, 86.80645161, 86.80645161, 87.19354839, 87.58064516, 87.58064516, 87.96774194, 87.96774194, 88.35483871, 88.35483871, 88.74193548, 89.12903226, 89.12903226, 89.51612903, 89.51612903, 89.90322581, 90.29032258, 90.29032258, 90.67741935, 90.67741935, 91.06451613, 91.06451613, 91.4516129, 91.83870968, 91.83870968, 92.22580645, 92.22580645, 92.61290323, 93, 93, 93.38709677, 93.38709677, 93.77419355, 93.77419355, 94.16129032, 94.5483871, 94.5483871, 94.93548387, 94.93548387, 95.32258065, 95.70967742, 95.70967742, 96.09677419, 96.09677419, 96.48387097, 96.87096774, 96.87096774, 97.25806452, 97.25806452, 97.64516129, 97.64516129, 98.03225806, 98.41935484, 98.41935484, 98.80645161, 98.80645161, 99.19354839, 99.58064516, 99.58064516, 99.96774194, 99.96774194, 100.35483871, 100.35483871, 100.74193548 };

        GetAndSetParams params =
        {
            size,
            &tuning,
            definition,
            
            expectedIntervalCentsTable,
            expectedRatioTable,
            
            rootIndex,
            tableSize,
            expectedFrequencyTable,
            expectedMtsTable,

            newRootFrequecy,
            newRootIndex,
            newTableSize,
            newExpectedFrequencyTable,
            newExpectedMtsTable,

            expectedStandardOutput,
            expectedMtsStandardOutput,

            indexTextSize,
            closestIndexInput,
            expectedIndexOutput,
            expectedIndexMtsOutput
        };

        doTests("31-edo", params, false);

        tuning.cacheTables();
        doTests("31-edo with tables", params);
    }

    void test34edoR1()
    {
        const int size = 1;
        const double expectedIntervalCentsTable[size] = { 35.29411764705883 };

        auto definition = CentsDefinition::CentsDivisions(34);
        auto tuning = FunctionalTuning(definition);

        const double expectedRatioTable[size] = { 1.0205959096 };

        const int rootIndex = 196;
        const int tableSize = 361;
        const double* expectedFrequencyTable = new double[tableSize] { 8.09288352, 8.25956382, 8.42967705, 8.60329391, 8.78048658, 8.96132868, 9.1458954, 9.33426343, 9.52651108, 9.72271824, 9.92296647, 10.12733899, 10.33592075, 10.54879843, 10.76606053, 10.98779734, 11.21410102, 11.44506563, 11.68078717, 11.92136361, 12.16689493, 12.4174832, 12.67323256, 12.93424931, 13.20064194, 13.47252117, 13.75, 14.03319376, 14.32222015, 14.6171993, 14.91825381, 15.22550882, 15.53909202, 15.85913376, 16.18576704, 16.51912764, 16.85935409, 17.20658783, 17.56097315, 17.92265737, 18.2917908, 18.66852687, 19.05302216, 19.44543648, 19.84593293, 20.25467797, 20.67184149, 21.09759687, 21.53212107, 21.97559468, 22.42820205, 22.89013127, 23.36157434, 23.84272721, 24.33378987, 24.8349664, 25.34646513, 25.86849863, 26.40128389, 26.94504234, 27.5, 28.06638751, 28.64444029, 29.2343986, 29.83650763, 30.45101764, 31.07818404, 31.71826751, 32.37153408, 33.03825527, 33.71870819, 34.41317565, 35.12194631, 35.84531474, 36.5835816, 37.33705374, 38.10604432, 38.89087297, 39.69186587, 40.50935595, 41.34368298, 42.19519374, 43.06424213, 43.95118937, 44.85640409, 45.78026253, 46.72314868, 47.68545443, 48.66757974, 49.66993281, 50.69293025, 51.73699726, 52.80256778, 53.89008469, 55, 56.13277503, 57.28888059, 58.46879719, 59.67301525, 60.90203528, 62.15636809, 63.43653503, 64.74306816, 66.07651054, 67.43741638, 68.82635131, 70.24389262, 71.69062948, 73.1671632, 74.67410748, 76.21208864, 77.78174593, 79.38373174, 81.0187119, 82.68736596, 84.39038747, 86.12848426, 87.90237874, 89.71280818, 91.56052507, 93.44629736, 95.37090886, 97.33515947, 99.33986561, 101.3858605, 103.47399452, 105.60513555, 107.78016938, 110, 112.26555005, 114.57776117, 116.93759438, 119.3460305, 121.80407055, 124.31273618, 126.87307005, 129.48613633, 132.15302109, 134.87483276, 137.65270262, 140.48778524, 143.38125896, 146.3343264, 149.34821496, 152.42417729, 155.56349186, 158.76746347, 162.0374238, 165.37473192, 168.78077495, 172.25696853, 175.80475748, 179.42561637, 183.12105014, 186.89259473, 190.74181771, 194.67031894, 198.67973123, 202.77172101, 206.94798904, 211.21027111, 215.56033875, 220, 224.53110011, 229.15552234, 233.87518876, 238.692061, 243.60814111, 248.62547235, 253.7461401, 258.97227266, 264.30604217, 269.74966552, 275.30540524, 280.97557047, 286.76251791, 292.6686528, 298.69642991, 304.84835458, 311.12698372, 317.53492695, 324.07484759, 330.74946385, 337.5615499, 344.51393706, 351.60951496, 358.85123273, 366.24210027, 373.78518946, 381.48363542, 389.34063788, 397.35946245, 405.54344201, 413.89597808, 422.42054222, 431.12067751, 440, 449.06220022, 458.31104469, 467.75037752, 477.384122, 487.21628221, 497.25094471, 507.4922802, 517.94454532, 528.61208434, 539.49933103, 550.61081047, 561.95114094, 573.52503583, 585.33730561, 597.39285983, 609.69670915, 622.25396744, 635.06985389, 648.14969518, 661.4989277, 675.1230998, 689.02787412, 703.21902991, 717.70246546, 732.48420055, 747.57037891, 762.96727084, 778.68127576, 794.71892491, 811.08688403, 827.79195615, 844.84108443, 862.24135502, 880, 898.12440043, 916.62208937, 935.50075504, 954.76824401, 974.43256443, 994.50188942, 1014.98456041, 1035.88909064, 1057.22416869, 1078.99866207, 1101.22162095, 1123.90228188, 1147.05007166, 1170.67461121, 1194.78571965, 1219.3934183, 1244.50793489, 1270.13970779, 1296.29939036, 1322.99785539, 1350.2461996, 1378.05574823, 1406.43805982, 1435.40493093, 1464.9684011, 1495.14075782, 1525.93454168, 1557.36255152, 1589.43784982, 1622.17376806, 1655.58391231, 1689.68216886, 1724.48271003, 1760, 1796.24880086, 1833.24417875, 1871.00151009, 1909.53648801, 1948.86512886, 1989.00377884, 2029.96912082, 2071.77818128, 2114.44833737, 2157.99732414, 2202.4432419, 2247.80456376, 2294.10014331, 2341.34922243, 2389.57143931, 2438.78683661, 2489.01586978, 2540.27941557, 2592.59878072, 2645.99571079, 2700.49239919, 2756.11149647, 2812.87611964, 2870.80986186, 2929.93680219, 2990.28151565, 3051.86908336, 3114.72510305, 3178.87569964, 3244.34753611, 3311.16782461, 3379.36433773, 3448.96542007, 3520, 3592.49760172, 3666.48835749, 3742.00302018, 3819.07297603, 3897.73025772, 3978.00755767, 4059.93824164, 4143.55636256, 4228.89667474, 4315.99464827, 4404.8864838, 4495.60912753, 4588.20028662, 4682.69844486, 4779.14287862, 4877.57367321, 4978.03173955, 5080.55883115, 5185.19756145, 5291.99142157, 5400.98479839, 5512.22299294, 5625.75223928, 5741.61972372, 5859.87360439, 5980.56303129, 6103.73816672, 6229.4502061, 6357.75139927, 6488.69507222, 6622.33564922, 6758.72867546, 6897.93084013, 7040, 7184.99520344, 7332.97671498, 7484.00604035, 7638.14595205, 7795.46051544, 7956.01511534, 8119.87648327, 8287.11272512, 8457.79334948, 8631.98929655, 8809.77296759, 8991.21825505, 9176.40057324, 9365.39688971, 9558.28575723, 9755.14734642, 9956.06347911, 10161.11766229, 10370.39512289, 10583.98284315, 10801.96959678, 11024.44598587, 11251.50447856, 11483.23944744, 11719.74720878, 11961.12606259, 12207.47633344, 12458.9004122 };
        const double* expectedMtsTable = new double[tableSize] { -0.17647059, 0.17647059, 0.52941176, 0.88235294, 1.23529412, 1.58823529, 1.94117647, 2.29411765, 2.64705882, 3, 3.35294118, 3.70588235, 4.05882353, 4.41176471, 4.76470588, 5.11764706, 5.47058824, 5.82352941, 6.17647059, 6.52941176, 6.88235294, 7.23529412, 7.58823529, 7.94117647, 8.29411765, 8.64705882, 9, 9.35294118, 9.70588235, 10.05882353, 10.41176471, 10.76470588, 11.11764706, 11.47058824, 11.82352941, 12.17647059, 12.52941176, 12.88235294, 13.23529412, 13.58823529, 13.94117647, 14.29411765, 14.64705882, 15, 15.35294118, 15.70588235, 16.05882353, 16.41176471, 16.76470588, 17.11764706, 17.47058824, 17.82352941, 18.17647059, 18.52941176, 18.88235294, 19.23529412, 19.58823529, 19.94117647, 20.29411765, 20.64705882, 21, 21.35294118, 21.70588235, 22.05882353, 22.41176471, 22.76470588, 23.11764706, 23.47058824, 23.82352941, 24.17647059, 24.52941176, 24.88235294, 25.23529412, 25.58823529, 25.94117647, 26.29411765, 26.64705882, 27, 27.35294118, 27.70588235, 28.05882353, 28.41176471, 28.76470588, 29.11764706, 29.47058824, 29.82352941, 30.17647059, 30.52941176, 30.88235294, 31.23529412, 31.58823529, 31.94117647, 32.29411765, 32.64705882, 33, 33.35294118, 33.70588235, 34.05882353, 34.41176471, 34.76470588, 35.11764706, 35.47058824, 35.82352941, 36.17647059, 36.52941176, 36.88235294, 37.23529412, 37.58823529, 37.94117647, 38.29411765, 38.64705882, 39, 39.35294118, 39.70588235, 40.05882353, 40.41176471, 40.76470588, 41.11764706, 41.47058824, 41.82352941, 42.17647059, 42.52941176, 42.88235294, 43.23529412, 43.58823529, 43.94117647, 44.29411765, 44.64705882, 45, 45.35294118, 45.70588235, 46.05882353, 46.41176471, 46.76470588, 47.11764706, 47.47058824, 47.82352941, 48.17647059, 48.52941176, 48.88235294, 49.23529412, 49.58823529, 49.94117647, 50.29411765, 50.64705882, 51, 51.35294118, 51.70588235, 52.05882353, 52.41176471, 52.76470588, 53.11764706, 53.47058824, 53.82352941, 54.17647059, 54.52941176, 54.88235294, 55.23529412, 55.58823529, 55.94117647, 56.29411765, 56.64705882, 57, 57.35294118, 57.70588235, 58.05882353, 58.41176471, 58.76470588, 59.11764706, 59.47058824, 59.82352941, 60.17647059, 60.52941176, 60.88235294, 61.23529412, 61.58823529, 61.94117647, 62.29411765, 62.64705882, 63, 63.35294118, 63.70588235, 64.05882353, 64.41176471, 64.76470588, 65.11764706, 65.47058824, 65.82352941, 66.17647059, 66.52941176, 66.88235294, 67.23529412, 67.58823529, 67.94117647, 68.29411765, 68.64705882, 69, 69.35294118, 69.70588235, 70.05882353, 70.41176471, 70.76470588, 71.11764706, 71.47058824, 71.82352941, 72.17647059, 72.52941176, 72.88235294, 73.23529412, 73.58823529, 73.94117647, 74.29411765, 74.64705882, 75, 75.35294118, 75.70588235, 76.05882353, 76.41176471, 76.76470588, 77.11764706, 77.47058824, 77.82352941, 78.17647059, 78.52941176, 78.88235294, 79.23529412, 79.58823529, 79.94117647, 80.29411765, 80.64705882, 81, 81.35294118, 81.70588235, 82.05882353, 82.41176471, 82.76470588, 83.11764706, 83.47058824, 83.82352941, 84.17647059, 84.52941176, 84.88235294, 85.23529412, 85.58823529, 85.94117647, 86.29411765, 86.64705882, 87, 87.35294118, 87.70588235, 88.05882353, 88.41176471, 88.76470588, 89.11764706, 89.47058824, 89.82352941, 90.17647059, 90.52941176, 90.88235294, 91.23529412, 91.58823529, 91.94117647, 92.29411765, 92.64705882, 93, 93.35294118, 93.70588235, 94.05882353, 94.41176471, 94.76470588, 95.11764706, 95.47058824, 95.82352941, 96.17647059, 96.52941176, 96.88235294, 97.23529412, 97.58823529, 97.94117647, 98.29411765, 98.64705882, 99, 99.35294118, 99.70588235, 100.05882353, 100.41176471, 100.76470588, 101.11764706, 101.47058824, 101.82352941, 102.17647059, 102.52941176, 102.88235294, 103.23529412, 103.58823529, 103.94117647, 104.29411765, 104.64705882, 105, 105.35294118, 105.70588235, 106.05882353, 106.41176471, 106.76470588, 107.11764706, 107.47058824, 107.82352941, 108.17647059, 108.52941176, 108.88235294, 109.23529412, 109.58823529, 109.94117647, 110.29411765, 110.64705882, 111, 111.35294118, 111.70588235, 112.05882353, 112.41176471, 112.76470588, 113.11764706, 113.47058824, 113.82352941, 114.17647059, 114.52941176, 114.88235294, 115.23529412, 115.58823529, 115.94117647, 116.29411765, 116.64705882, 117, 117.35294118, 117.70588235, 118.05882353, 118.41176471, 118.76470588, 119.11764706, 119.47058824, 119.82352941, 120.17647059, 120.52941176, 120.88235294, 121.23529412, 121.58823529, 121.94117647, 122.29411765, 122.64705882, 123, 123.35294118, 123.70588235, 124.05882353, 124.41176471, 124.76470588, 125.11764706, 125.47058824, 125.82352941, 126.17647059, 126.52941176, 126.88235294 };

        const double newRootFrequency = 256;
        const int newRootIndex = 169;
        const int newTableSize = 361;
        const double* newExpectedFrequencyTable = new double[tableSize] { 8.16476728, 8.33292809, 8.50455232, 8.67971131, 8.85847786, 9.04092627, 9.22713237, 9.41717355, 9.61112881, 9.80907875, 10.01110564, 10.21729347, 10.42772792, 10.64249647, 10.86168836, 11.08539471, 11.3137085, 11.54672462, 11.78453991, 12.02725323, 12.27496545, 12.52777953, 12.78580054, 13.04913574, 13.31789456, 13.59218871, 13.8721322, 14.15784138, 14.449435, 14.74703426, 15.05076284, 15.36074699, 15.67711555, 16, 16.32953455, 16.66585617, 17.00910464, 17.35942262, 17.71695572, 18.08185253, 18.45426473, 18.8343471, 19.22225761, 19.61815749, 20.02221129, 20.43458694, 20.85545585, 21.28499293, 21.72337672, 22.17078942, 22.627417, 23.09344923, 23.56907982, 24.05450646, 24.5499309, 25.05555906, 25.57160109, 26.09827147, 26.63578911, 27.18437741, 27.74426439, 28.31568275, 28.89887, 29.49406851, 30.10152568, 30.72149398, 31.35423109, 32, 32.65906911, 33.33171234, 34.01820927, 34.71884524, 35.43391143, 36.16370507, 36.90852947, 37.66869421, 38.44451522, 39.23631498, 40.04442258, 40.86917389, 41.7109117, 42.56998586, 43.44675344, 44.34157885, 45.254834, 46.18689846, 47.13815965, 48.10901292, 49.0998618, 50.11111812, 51.14320218, 52.19654294, 53.27157822, 54.36875483, 55.48852879, 56.63136551, 57.79773999, 58.98813702, 60.20305136, 61.44298796, 62.70846218, 64, 65.31813821, 66.66342468, 68.03641855, 69.43769047, 70.86782287, 72.32741014, 73.81705894, 75.33738841, 76.88903045, 78.47262997, 80.08884516, 81.73834777, 83.42182339, 85.13997172, 86.89350688, 88.68315769, 90.50966799, 92.37379693, 94.2763193, 96.21802585, 98.19972361, 100.22223624, 102.28640435, 104.39308589, 106.54315644, 108.73750966, 110.97705758, 113.26273102, 115.59547999, 117.97627404, 120.40610271, 122.88597592, 125.41692437, 128, 130.63627643, 133.32684936, 136.0728371, 138.87538095, 141.73564574, 144.65482028, 147.63411788, 150.67477682, 153.7780609, 156.94525994, 160.17769032, 163.47669555, 166.84364679, 170.27994345, 173.78701377, 177.36631539, 181.01933598, 184.74759386, 188.5526386, 192.43605169, 196.39944721, 200.44447247, 204.5728087, 208.78617177, 213.08631289, 217.47501932, 221.95411515, 226.52546204, 231.19095997, 235.95254808, 240.81220543, 245.77195183, 250.83384873, 256, 261.27255285, 266.65369873, 272.14567419, 277.75076189, 283.47129147, 289.30964056, 295.26823576, 301.34955364, 307.5561218, 313.89051987, 320.35538064, 326.95339109, 333.68729357, 340.5598869, 347.57402754, 354.73263078, 362.03867197, 369.49518772, 377.1052772, 384.87210339, 392.79889443, 400.88894494, 409.1456174, 417.57234354, 426.17262577, 434.95003864, 443.90823031, 453.05092408, 462.38191995, 471.90509616, 481.62441085, 491.54390367, 501.66769746, 512, 522.5451057, 533.30739745, 544.29134839, 555.50152379, 566.94258294, 578.61928112, 590.53647151, 602.69910728, 615.1122436, 627.78103975, 640.71076128, 653.90678219, 667.37458714, 681.1197738, 695.14805507, 709.46526156, 724.07734394, 738.99037544, 754.21055439, 769.74420677, 785.59778886, 801.77788988, 818.2912348, 835.14468709, 852.34525155, 869.90007728, 887.81646061, 906.10184816, 924.76383989, 943.81019232, 963.2488217, 983.08780734, 1003.33539493, 1024, 1045.09021141, 1066.61479491, 1088.58269678, 1111.00304757, 1133.88516588, 1157.23856223, 1181.07294302, 1205.39821456, 1230.2244872, 1255.5620795, 1281.42152256, 1307.81356437, 1334.74917429, 1362.23954759, 1390.29611014, 1418.93052312, 1448.15468787, 1477.98075088, 1508.42110878, 1539.48841355, 1571.19557771, 1603.55577976, 1636.58246961, 1670.28937417, 1704.69050309, 1739.80015456, 1775.63292123, 1812.20369632, 1849.52767979, 1887.62038465, 1926.49764341, 1966.17561468, 2006.67078986, 2048, 2090.18042282, 2133.22958981, 2177.16539356, 2222.00609514, 2267.77033176, 2314.47712446, 2362.14588604, 2410.79642913, 2460.44897439, 2511.124159, 2562.84304512, 2615.62712874, 2669.49834858, 2724.47909519, 2780.59222029, 2837.86104623, 2896.30937574, 2955.96150176, 3016.84221757, 3078.9768271, 3142.39115543, 3207.11155953, 3273.16493922, 3340.57874835, 3409.38100619, 3479.60030912, 3551.26584246, 3624.40739264, 3699.05535958, 3775.24076929, 3852.99528682, 3932.35122936, 4013.34157971, 4096, 4180.36084564, 4266.45917962, 4354.33078711, 4444.01219028, 4535.54066353, 4628.95424893, 4724.29177209, 4821.59285825, 4920.89794879, 5022.24831799, 5125.68609024, 5231.25425748, 5338.99669716, 5448.95819038, 5561.18444057, 5675.72209246, 5792.61875148, 5911.92300351, 6033.68443514, 6157.95365419, 6284.78231085, 6414.22311905, 6546.32987844, 6681.15749669, 6818.76201238, 6959.20061823, 7102.53168491, 7248.81478528, 7398.11071916, 7550.48153859, 7705.99057364, 7864.70245871, 8026.68315942, 8192, 8360.72169128, 8532.91835925, 8708.66157423, 8888.02438057, 9071.08132705, 9257.90849785, 9448.58354417, 9643.1857165, 9841.79589758, 10044.49663599, 10251.37218047, 10462.50851497, 10677.99339432, 10897.91638076, 11122.36888114, 11351.44418493, 11585.23750296, 11823.84600703, 12067.36887027, 12315.90730839, 12569.5646217 };
        const double* newExpectedMtsTable = new double[tableSize] { -0.02337539, 0.32956579, 0.68250697, 1.03544814, 1.38838932, 1.7413305, 2.09427167, 2.44721285, 2.80015403, 3.1530952, 3.50603638, 3.85897756, 4.21191873, 4.56485991, 4.91780108, 5.27074226, 5.62368344, 5.97662461, 6.32956579, 6.68250697, 7.03544814, 7.38838932, 7.7413305, 8.09427167, 8.44721285, 8.80015403, 9.1530952, 9.50603638, 9.85897756, 10.21191873, 10.56485991, 10.91780108, 11.27074226, 11.62368344, 11.97662461, 12.32956579, 12.68250697, 13.03544814, 13.38838932, 13.7413305, 14.09427167, 14.44721285, 14.80015403, 15.1530952, 15.50603638, 15.85897756, 16.21191873, 16.56485991, 16.91780108, 17.27074226, 17.62368344, 17.97662461, 18.32956579, 18.68250697, 19.03544814, 19.38838932, 19.7413305, 20.09427167, 20.44721285, 20.80015403, 21.1530952, 21.50603638, 21.85897756, 22.21191873, 22.56485991, 22.91780108, 23.27074226, 23.62368344, 23.97662461, 24.32956579, 24.68250697, 25.03544814, 25.38838932, 25.7413305, 26.09427167, 26.44721285, 26.80015403, 27.1530952, 27.50603638, 27.85897756, 28.21191873, 28.56485991, 28.91780108, 29.27074226, 29.62368344, 29.97662461, 30.32956579, 30.68250697, 31.03544814, 31.38838932, 31.7413305, 32.09427167, 32.44721285, 32.80015403, 33.1530952, 33.50603638, 33.85897756, 34.21191873, 34.56485991, 34.91780108, 35.27074226, 35.62368344, 35.97662461, 36.32956579, 36.68250697, 37.03544814, 37.38838932, 37.7413305, 38.09427167, 38.44721285, 38.80015403, 39.1530952, 39.50603638, 39.85897756, 40.21191873, 40.56485991, 40.91780108, 41.27074226, 41.62368344, 41.97662461, 42.32956579, 42.68250697, 43.03544814, 43.38838932, 43.7413305, 44.09427167, 44.44721285, 44.80015403, 45.1530952, 45.50603638, 45.85897756, 46.21191873, 46.56485991, 46.91780108, 47.27074226, 47.62368344, 47.97662461, 48.32956579, 48.68250697, 49.03544814, 49.38838932, 49.7413305, 50.09427167, 50.44721285, 50.80015403, 51.1530952, 51.50603638, 51.85897756, 52.21191873, 52.56485991, 52.91780108, 53.27074226, 53.62368344, 53.97662461, 54.32956579, 54.68250697, 55.03544814, 55.38838932, 55.7413305, 56.09427167, 56.44721285, 56.80015403, 57.1530952, 57.50603638, 57.85897756, 58.21191873, 58.56485991, 58.91780108, 59.27074226, 59.62368344, 59.97662461, 60.32956579, 60.68250697, 61.03544814, 61.38838932, 61.7413305, 62.09427167, 62.44721285, 62.80015403, 63.1530952, 63.50603638, 63.85897756, 64.21191873, 64.56485991, 64.91780108, 65.27074226, 65.62368344, 65.97662461, 66.32956579, 66.68250697, 67.03544814, 67.38838932, 67.7413305, 68.09427167, 68.44721285, 68.80015403, 69.1530952, 69.50603638, 69.85897756, 70.21191873, 70.56485991, 70.91780108, 71.27074226, 71.62368344, 71.97662461, 72.32956579, 72.68250697, 73.03544814, 73.38838932, 73.7413305, 74.09427167, 74.44721285, 74.80015403, 75.1530952, 75.50603638, 75.85897756, 76.21191873, 76.56485991, 76.91780108, 77.27074226, 77.62368344, 77.97662461, 78.32956579, 78.68250697, 79.03544814, 79.38838932, 79.7413305, 80.09427167, 80.44721285, 80.80015403, 81.1530952, 81.50603638, 81.85897756, 82.21191873, 82.56485991, 82.91780108, 83.27074226, 83.62368344, 83.97662461, 84.32956579, 84.68250697, 85.03544814, 85.38838932, 85.7413305, 86.09427167, 86.44721285, 86.80015403, 87.1530952, 87.50603638, 87.85897756, 88.21191873, 88.56485991, 88.91780108, 89.27074226, 89.62368344, 89.97662461, 90.32956579, 90.68250697, 91.03544814, 91.38838932, 91.7413305, 92.09427167, 92.44721285, 92.80015403, 93.1530952, 93.50603638, 93.85897756, 94.21191873, 94.56485991, 94.91780108, 95.27074226, 95.62368344, 95.97662461, 96.32956579, 96.68250697, 97.03544814, 97.38838932, 97.7413305, 98.09427167, 98.44721285, 98.80015403, 99.1530952, 99.50603638, 99.85897756, 100.21191873, 100.56485991, 100.91780108, 101.27074226, 101.62368344, 101.97662461, 102.32956579, 102.68250697, 103.03544814, 103.38838932, 103.7413305, 104.09427167, 104.44721285, 104.80015403, 105.1530952, 105.50603638, 105.85897756, 106.21191873, 106.56485991, 106.91780108, 107.27074226, 107.62368344, 107.97662461, 108.32956579, 108.68250697, 109.03544814, 109.38838932, 109.7413305, 110.09427167, 110.44721285, 110.80015403, 111.1530952, 111.50603638, 111.85897756, 112.21191873, 112.56485991, 112.91780108, 113.27074226, 113.62368344, 113.97662461, 114.32956579, 114.68250697, 115.03544814, 115.38838932, 115.7413305, 116.09427167, 116.44721285, 116.80015403, 117.1530952, 117.50603638, 117.85897756, 118.21191873, 118.56485991, 118.91780108, 119.27074226, 119.62368344, 119.97662461, 120.32956579, 120.68250697, 121.03544814, 121.38838932, 121.7413305, 122.09427167, 122.44721285, 122.80015403, 123.1530952, 123.50603638, 123.85897756, 124.21191873, 124.56485991, 124.91780108, 125.27074226, 125.62368344, 125.97662461, 126.32956579, 126.68250697, 127.03544814 };

        const int expectedStandardOutput[128] = { 0, 3, 6, 9, 12, 15, 17, 20, 23, 26, 29, 32, 34, 37, 40, 43, 46, 49, 51, 54, 57, 60, 63, 66, 68, 71, 74, 77, 80, 83, 85, 88, 91, 94, 97, 100, 102, 105, 108, 111, 114, 117, 119, 122, 125, 128, 131, 134, 136, 139, 142, 145, 148, 151, 153, 156, 159, 162, 165, 168, 170, 173, 176, 179, 182, 185, 187, 190, 193, 196, 199, 202, 204, 207, 210, 213, 216, 219, 221, 224, 227, 230, 233, 236, 238, 241, 244, 247, 250, 253, 255, 258, 261, 264, 267, 270, 272, 275, 278, 281, 284, 287, 289, 292, 295, 298, 301, 304, 306, 309, 312, 315, 318, 321, 323, 326, 329, 332, 335, 338, 340, 343, 346, 349, 352, 355, 357, 360 };
        const double expectedMtsStandardOutput[128] = { -0.17647059, 0.88235294, 1.94117647, 3, 4.05882353, 5.11764706, 5.82352941, 6.88235294, 7.94117647, 9, 10.05882353, 11.11764706, 11.82352941, 12.88235294, 13.94117647, 15, 16.05882353, 17.11764706, 17.82352941, 18.88235294, 19.94117647, 21, 22.05882353, 23.11764706, 23.82352941, 24.88235294, 25.94117647, 27, 28.05882353, 29.11764706, 29.82352941, 30.88235294, 31.94117647, 33, 34.05882353, 35.11764706, 35.82352941, 36.88235294, 37.94117647, 39, 40.05882353, 41.11764706, 41.82352941, 42.88235294, 43.94117647, 45, 46.05882353, 47.11764706, 47.82352941, 48.88235294, 49.94117647, 51, 52.05882353, 53.11764706, 53.82352941, 54.88235294, 55.94117647, 57, 58.05882353, 59.11764706, 59.82352941, 60.88235294, 61.94117647, 63, 64.05882353, 65.11764706, 65.82352941, 66.88235294, 67.94117647, 69, 70.05882353, 71.11764706, 71.82352941, 72.88235294, 73.94117647, 75, 76.05882353, 77.11764706, 77.82352941, 78.88235294, 79.94117647, 81, 82.05882353, 83.11764706, 83.82352941, 84.88235294, 85.94117647, 87, 88.05882353, 89.11764706, 89.82352941, 90.88235294, 91.94117647, 93, 94.05882353, 95.11764706, 95.82352941, 96.88235294, 97.94117647, 99, 100.05882353, 101.11764706, 101.82352941, 102.88235294, 103.94117647, 105, 106.05882353, 107.11764706, 107.82352941, 108.88235294, 109.94117647, 111, 112.05882353, 113.11764706, 113.82352941, 114.88235294, 115.94117647, 117, 118.05882353, 119.11764706, 119.82352941, 120.88235294, 121.94117647, 123, 124.05882353, 125.11764706, 125.82352941, 126.88235294 };

        // 24-edo with root at 440Hz
        const int indexTextSize = 255;
        const double* closestIndexInput = new double [indexTextSize] { 0, 0.5, 1, 1.5, 2, 2.5, 3, 3.5, 4, 4.5, 5, 5.5, 6, 6.5, 7, 7.5, 8, 8.5, 9, 9.5, 10, 10.5, 11, 11.5, 12, 12.5, 13, 13.5, 14, 14.5, 15, 15.5, 16, 16.5, 17, 17.5, 18, 18.5, 19, 19.5, 20, 20.5, 21, 21.5, 22, 22.5, 23, 23.5, 24, 24.5, 25, 25.5, 26, 26.5, 27, 27.5, 28, 28.5, 29, 29.5, 30, 30.5, 31, 31.5, 32, 32.5, 33, 33.5, 34, 34.5, 35, 35.5, 36, 36.5, 37, 37.5, 38, 38.5, 39, 39.5, 40, 40.5, 41, 41.5, 42, 42.5, 43, 43.5, 44, 44.5, 45, 45.5, 46, 46.5, 47, 47.5, 48, 48.5, 49, 49.5, 50, 50.5, 51, 51.5, 52, 52.5, 53, 53.5, 54, 54.5, 55, 55.5, 56, 56.5, 57, 57.5, 58, 58.5, 59, 59.5, 60, 60.5, 61, 61.5, 62, 62.5, 63, 63.5, 64, 64.5, 65, 65.5, 66, 66.5, 67, 67.5, 68, 68.5, 69, 69.5, 70, 70.5, 71, 71.5, 72, 72.5, 73, 73.5, 74, 74.5, 75, 75.5, 76, 76.5, 77, 77.5, 78, 78.5, 79, 79.5, 80, 80.5, 81, 81.5, 82, 82.5, 83, 83.5, 84, 84.5, 85, 85.5, 86, 86.5, 87, 87.5, 88, 88.5, 89, 89.5, 90, 90.5, 91, 91.5, 92, 92.5, 93, 93.5, 94, 94.5, 95, 95.5, 96, 96.5, 97, 97.5, 98, 98.5, 99, 99.5, 100, 100.5, 101, 101.5, 102, 102.5, 103, 103.5, 104, 104.5, 105, 105.5, 106, 106.5, 107, 107.5, 108, 108.5, 109, 109.5, 110, 110.5, 111, 111.5, 112, 112.5, 113, 113.5, 114, 114.5, 115, 115.5, 116, 116.5, 117, 117.5, 118, 118.5, 119, 119.5, 120, 120.5, 121, 121.5, 122, 122.5, 123, 123.5, 124, 124.5, 125, 125.5, 126, 126.5, 127 };
        const int* expectedIndexOutput = new int [indexTextSize] { 0, 2, 3, 5, 6, 8, 9, 10, 12, 13, 15, 16, 17, 19, 20, 22, 23, 25, 26, 27, 29, 30, 32, 33, 34, 36, 37, 39, 40, 42, 43, 44, 46, 47, 49, 50, 51, 53, 54, 56, 57, 59, 60, 61, 63, 64, 66, 67, 68, 70, 71, 73, 74, 76, 77, 78, 80, 81, 83, 84, 85, 87, 88, 90, 91, 93, 94, 95, 97, 98, 100, 101, 102, 104, 105, 107, 108, 110, 111, 112, 114, 115, 117, 118, 119, 121, 122, 124, 125, 127, 128, 129, 131, 132, 134, 135, 136, 138, 139, 141, 142, 144, 145, 146, 148, 149, 151, 152, 153, 155, 156, 158, 159, 161, 162, 163, 165, 166, 168, 169, 170, 172, 173, 175, 176, 178, 179, 180, 182, 183, 185, 186, 187, 189, 190, 192, 193, 195, 196, 197, 199, 200, 202, 203, 204, 206, 207, 209, 210, 212, 213, 214, 216, 217, 219, 220, 221, 223, 224, 226, 227, 229, 230, 231, 233, 234, 236, 237, 238, 240, 241, 243, 244, 246, 247, 248, 250, 251, 253, 254, 255, 257, 258, 260, 261, 263, 264, 265, 267, 268, 270, 271, 272, 274, 275, 277, 278, 280, 281, 282, 284, 285, 287, 288, 289, 291, 292, 294, 295, 297, 298, 299, 301, 302, 304, 305, 306, 308, 309, 311, 312, 314, 315, 316, 318, 319, 321, 322, 323, 325, 326, 328, 329, 331, 332, 333, 335, 336, 338, 339, 340, 342, 343, 345, 346, 348, 349, 350, 352, 353, 355, 356, 357, 359, 360 };
        const double* expectedIndexMtsOutput = new double [indexTextSize] { -0.17647059, 0.52941176, 0.88235294, 1.58823529, 1.94117647, 2.64705882, 3, 3.35294118, 4.05882353, 4.41176471, 5.11764706, 5.47058824, 5.82352941, 6.52941176, 6.88235294, 7.58823529, 7.94117647, 8.64705882, 9, 9.35294118, 10.05882353, 10.41176471, 11.11764706, 11.47058824, 11.82352941, 12.52941176, 12.88235294, 13.58823529, 13.94117647, 14.64705882, 15, 15.35294118, 16.05882353, 16.41176471, 17.11764706, 17.47058824, 17.82352941, 18.52941176, 18.88235294, 19.58823529, 19.94117647, 20.64705882, 21, 21.35294118, 22.05882353, 22.41176471, 23.11764706, 23.47058824, 23.82352941, 24.52941176, 24.88235294, 25.58823529, 25.94117647, 26.64705882, 27, 27.35294118, 28.05882353, 28.41176471, 29.11764706, 29.47058824, 29.82352941, 30.52941176, 30.88235294, 31.58823529, 31.94117647, 32.64705882, 33, 33.35294118, 34.05882353, 34.41176471, 35.11764706, 35.47058824, 35.82352941, 36.52941176, 36.88235294, 37.58823529, 37.94117647, 38.64705882, 39, 39.35294118, 40.05882353, 40.41176471, 41.11764706, 41.47058824, 41.82352941, 42.52941176, 42.88235294, 43.58823529, 43.94117647, 44.64705882, 45, 45.35294118, 46.05882353, 46.41176471, 47.11764706, 47.47058824, 47.82352941, 48.52941176, 48.88235294, 49.58823529, 49.94117647, 50.64705882, 51, 51.35294118, 52.05882353, 52.41176471, 53.11764706, 53.47058824, 53.82352941, 54.52941176, 54.88235294, 55.58823529, 55.94117647, 56.64705882, 57, 57.35294118, 58.05882353, 58.41176471, 59.11764706, 59.47058824, 59.82352941, 60.52941176, 60.88235294, 61.58823529, 61.94117647, 62.64705882, 63, 63.35294118, 64.05882353, 64.41176471, 65.11764706, 65.47058824, 65.82352941, 66.52941176, 66.88235294, 67.58823529, 67.94117647, 68.64705882, 69, 69.35294118, 70.05882353, 70.41176471, 71.11764706, 71.47058824, 71.82352941, 72.52941176, 72.88235294, 73.58823529, 73.94117647, 74.64705882, 75, 75.35294118, 76.05882353, 76.41176471, 77.11764706, 77.47058824, 77.82352941, 78.52941176, 78.88235294, 79.58823529, 79.94117647, 80.64705882, 81, 81.35294118, 82.05882353, 82.41176471, 83.11764706, 83.47058824, 83.82352941, 84.52941176, 84.88235294, 85.58823529, 85.94117647, 86.64705882, 87, 87.35294118, 88.05882353, 88.41176471, 89.11764706, 89.47058824, 89.82352941, 90.52941176, 90.88235294, 91.58823529, 91.94117647, 92.64705882, 93, 93.35294118, 94.05882353, 94.41176471, 95.11764706, 95.47058824, 95.82352941, 96.52941176, 96.88235294, 97.58823529, 97.94117647, 98.64705882, 99, 99.35294118, 100.05882353, 100.41176471, 101.11764706, 101.47058824, 101.82352941, 102.52941176, 102.88235294, 103.58823529, 103.94117647, 104.64705882, 105, 105.35294118, 106.05882353, 106.41176471, 107.11764706, 107.47058824, 107.82352941, 108.52941176, 108.88235294, 109.58823529, 109.94117647, 110.64705882, 111, 111.35294118, 112.05882353, 112.41176471, 113.11764706, 113.47058824, 113.82352941, 114.52941176, 114.88235294, 115.58823529, 115.94117647, 116.64705882, 117, 117.35294118, 118.05882353, 118.41176471, 119.11764706, 119.47058824, 119.82352941, 120.52941176, 120.88235294, 121.58823529, 121.94117647, 122.64705882, 123, 123.35294118, 124.05882353, 124.41176471, 125.11764706, 125.47058824, 125.82352941, 126.52941176, 126.88235294 };

        GetAndSetParams params =
        {
            size,
            &tuning,
            definition,

            expectedIntervalCentsTable,
            expectedRatioTable,

            rootIndex,
            tableSize,
            expectedFrequencyTable,
            expectedMtsTable,
            
            newRootFrequency,
            newRootIndex,
            newTableSize,
            newExpectedFrequencyTable,
            newExpectedMtsTable,

            expectedStandardOutput,
            expectedMtsStandardOutput,

            indexTextSize,
            closestIndexInput,
            expectedIndexOutput,
            expectedIndexMtsOutput
        };

        doTests("34-edo", params, false);

        tuning.cacheTables();
        doTests("34-edo with tables", params);
    }
};
